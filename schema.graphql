"""Add fields from field values."""
directive @infer on OBJECT

"""Add reference resolver."""
directive @reference(
  """Reference node by a custom field value."""
  by: String = "id"
) on FIELD_DEFINITION

"""Return value from another field."""
directive @proxy(from: String) on FIELD_DEFINITION

"""Paginate a connection in a query. Only supported in page-query."""
directive @paginate on FIELD

scalar Date

scalar File

scalar Image

enum ImageFit {
  """Crop to cover both provided dimensions."""
  cover

  """Embed within both provided dimensions."""
  contain

  """
  Ignore the aspect ratio of the input and stretch to both provided dimensions.
  """
  fill

  """
  Preserving aspect ratio, resize the image to be as large as possible while
  ensuring its dimensions are less than or equal to both those specified.
  """
  inside

  """
  Preserving aspect ratio, resize the image to be as small as possible while
  ensuring its dimensions are greater than or equal to both those specified.
  Some of these values are based on the object-fit CSS property.
  """
  outside
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONQueryOperatorInput {
  """Filter by property of (strict) equality."""
  eq: JSON

  """Filter by property not equal to provided value."""
  ne: JSON

  """Filter by property matching any of the provided values."""
  in: [JSON]

  """Filter by property not matching any of the provided values."""
  nin: [JSON]

  """
  Filter nodes that contain the field, including nodes where the field value is null.
  """
  exists: Boolean

  """Filter by property matching provided regular expression."""
  regex: String
}

type Metadata {
  siteName: String
  siteDescription: String
  siteUrl: String
  pathPrefix: String
}

type Mutation {
  """The payload for the createCategory mutation"""
  createCategory(
    """Input for the createCategory mutation"""
    input: wpGraphQl_CreateCategoryInput!
  ): wpGraphQl_CreateCategoryPayload

  """The payload for the createComment mutation"""
  createComment(
    """Input for the createComment mutation"""
    input: wpGraphQl_CreateCommentInput!
  ): wpGraphQl_CreateCommentPayload

  """The payload for the createMediaItem mutation"""
  createMediaItem(
    """Input for the createMediaItem mutation"""
    input: wpGraphQl_CreateMediaItemInput!
  ): wpGraphQl_CreateMediaItemPayload

  """The payload for the createPage mutation"""
  createPage(
    """Input for the createPage mutation"""
    input: wpGraphQl_CreatePageInput!
  ): wpGraphQl_CreatePagePayload

  """The payload for the createPost mutation"""
  createPost(
    """Input for the createPost mutation"""
    input: wpGraphQl_CreatePostInput!
  ): wpGraphQl_CreatePostPayload

  """The payload for the createPostFormat mutation"""
  createPostFormat(
    """Input for the createPostFormat mutation"""
    input: wpGraphQl_CreatePostFormatInput!
  ): wpGraphQl_CreatePostFormatPayload

  """The payload for the createTag mutation"""
  createTag(
    """Input for the createTag mutation"""
    input: wpGraphQl_CreateTagInput!
  ): wpGraphQl_CreateTagPayload

  """The payload for the createUser mutation"""
  createUser(
    """Input for the createUser mutation"""
    input: wpGraphQl_CreateUserInput!
  ): wpGraphQl_CreateUserPayload

  """The payload for the deleteCategory mutation"""
  deleteCategory(
    """Input for the deleteCategory mutation"""
    input: wpGraphQl_DeleteCategoryInput!
  ): wpGraphQl_DeleteCategoryPayload

  """The payload for the deleteComment mutation"""
  deleteComment(
    """Input for the deleteComment mutation"""
    input: wpGraphQl_DeleteCommentInput!
  ): wpGraphQl_DeleteCommentPayload

  """The payload for the deleteMediaItem mutation"""
  deleteMediaItem(
    """Input for the deleteMediaItem mutation"""
    input: wpGraphQl_DeleteMediaItemInput!
  ): wpGraphQl_DeleteMediaItemPayload

  """The payload for the deletePage mutation"""
  deletePage(
    """Input for the deletePage mutation"""
    input: wpGraphQl_DeletePageInput!
  ): wpGraphQl_DeletePagePayload

  """The payload for the deletePost mutation"""
  deletePost(
    """Input for the deletePost mutation"""
    input: wpGraphQl_DeletePostInput!
  ): wpGraphQl_DeletePostPayload

  """The payload for the deletePostFormat mutation"""
  deletePostFormat(
    """Input for the deletePostFormat mutation"""
    input: wpGraphQl_DeletePostFormatInput!
  ): wpGraphQl_DeletePostFormatPayload

  """The payload for the deleteTag mutation"""
  deleteTag(
    """Input for the deleteTag mutation"""
    input: wpGraphQl_DeleteTagInput!
  ): wpGraphQl_DeleteTagPayload

  """The payload for the deleteUser mutation"""
  deleteUser(
    """Input for the deleteUser mutation"""
    input: wpGraphQl_DeleteUserInput!
  ): wpGraphQl_DeleteUserPayload

  """Increase the count."""
  increaseCount(
    """The count to increase"""
    count: Int
  ): Int

  """The payload for the registerUser mutation"""
  registerUser(
    """Input for the registerUser mutation"""
    input: wpGraphQl_RegisterUserInput!
  ): wpGraphQl_RegisterUserPayload

  """The payload for the resetUserPassword mutation"""
  resetUserPassword(
    """Input for the resetUserPassword mutation"""
    input: wpGraphQl_ResetUserPasswordInput!
  ): wpGraphQl_ResetUserPasswordPayload

  """The payload for the restoreComment mutation"""
  restoreComment(
    """Input for the restoreComment mutation"""
    input: wpGraphQl_RestoreCommentInput!
  ): wpGraphQl_RestoreCommentPayload

  """The payload for the sendPasswordResetEmail mutation"""
  sendPasswordResetEmail(
    """Input for the sendPasswordResetEmail mutation"""
    input: wpGraphQl_SendPasswordResetEmailInput!
  ): wpGraphQl_SendPasswordResetEmailPayload

  """The payload for the UpdateCategory mutation"""
  updateCategory(
    """Input for the UpdateCategory mutation"""
    input: wpGraphQl_UpdateCategoryInput!
  ): wpGraphQl_UpdateCategoryPayload

  """The payload for the updateComment mutation"""
  updateComment(
    """Input for the updateComment mutation"""
    input: wpGraphQl_UpdateCommentInput!
  ): wpGraphQl_UpdateCommentPayload

  """The payload for the updateMediaItem mutation"""
  updateMediaItem(
    """Input for the updateMediaItem mutation"""
    input: wpGraphQl_UpdateMediaItemInput!
  ): wpGraphQl_UpdateMediaItemPayload

  """The payload for the updatePage mutation"""
  updatePage(
    """Input for the updatePage mutation"""
    input: wpGraphQl_UpdatePageInput!
  ): wpGraphQl_UpdatePagePayload

  """The payload for the updatePost mutation"""
  updatePost(
    """Input for the updatePost mutation"""
    input: wpGraphQl_UpdatePostInput!
  ): wpGraphQl_UpdatePostPayload

  """The payload for the UpdatePostFormat mutation"""
  updatePostFormat(
    """Input for the UpdatePostFormat mutation"""
    input: wpGraphQl_UpdatePostFormatInput!
  ): wpGraphQl_UpdatePostFormatPayload

  """The payload for the updateSettings mutation"""
  updateSettings(
    """Input for the updateSettings mutation"""
    input: wpGraphQl_UpdateSettingsInput!
  ): wpGraphQl_UpdateSettingsPayload

  """The payload for the UpdateTag mutation"""
  updateTag(
    """Input for the UpdateTag mutation"""
    input: wpGraphQl_UpdateTagInput!
  ): wpGraphQl_UpdateTagPayload

  """The payload for the updateUser mutation"""
  updateUser(
    """Input for the updateUser mutation"""
    input: wpGraphQl_UpdateUserInput!
  ): wpGraphQl_UpdateUserPayload
}

interface Node {
  id: ID!
}

interface NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NodeConnectionEdge]
}

interface NodeConnectionEdge {
  node: Node
  next: Node
  previous: Node
}

type Page {
  path: String!
  context: JSON!
}

input PageFilterInput {
  path: StringQueryOperatorInput
  context: JSONQueryOperatorInput
}

type PageInfo {
  perPage: Int!
  currentPage: Int!
  totalPages: Int!
  totalItems: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  isFirst: Boolean!
  isLast: Boolean!
}

type Query {
  metadata: Metadata
  metaData: Metadata @deprecated(reason: "Use Query.metadata instead.")

  """An object of the page Type. """
  page(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: wpGraphQl_PageIdType

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): wpGraphQl_Page
  allPage(
    """Filter pages."""
    filter: PageFilterInput
  ): [Page]

  """Entry point to get all settings for the site"""
  allSettings: wpGraphQl_Settings

  """Connection between the RootQuery type and the category type"""
  categories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToCategoryConnectionWhereArgs
  ): wpGraphQl_RootQueryToCategoryConnection

  """A 0bject"""
  category(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: wpGraphQl_CategoryIdType
  ): wpGraphQl_Category

  """Returns a Comment"""
  comment(
    """Unique identifier for the comment node."""
    id: ID!
  ): wpGraphQl_Comment

  """Connection between the RootQuery type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToCommentConnectionWhereArgs
  ): wpGraphQl_RootQueryToCommentConnection

  """A node used to manage content"""
  contentNode(
    """Unique identifier for the content node."""
    id: ID!

    """
    Type of unique identifier to fetch a content node by. Default is Global ID
    """
    idType: wpGraphQl_ContentNodeIdTypeEnum

    """
    The content type the node is used for. Required when idType is set to "name" or "slug"
    """
    contentType: wpGraphQl_ContentTypeEnum

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): wpGraphQl_ContentNode

  """Connection between the RootQuery type and the ContentNode type"""
  contentNodes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToContentNodeConnectionWhereArgs
  ): wpGraphQl_RootQueryToContentNodeConnection

  """Fetch a Content Type node by unique Identifier"""
  contentType(
    """Unique Identifier for the Content Type node."""
    id: ID!

    """
    Type of unique identifier to fetch a content type by. Default is Global ID
    """
    idType: wpGraphQl_ContentTypeIdTypeEnum
  ): wpGraphQl_ContentType

  """Connection between the RootQuery type and the ContentType type"""
  contentTypes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_RootQueryToContentTypeConnection

  """Fields of the &#039;DiscussionSettings&#039; settings group"""
  discussionSettings: wpGraphQl_DiscussionSettings

  """Fields of the &#039;GeneralSettings&#039; settings group"""
  generalSettings: wpGraphQl_GeneralSettings

  """An object of the mediaItem Type. """
  mediaItem(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: wpGraphQl_MediaItemIdType

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): wpGraphQl_MediaItem

  """A mediaItem object"""
  mediaItemBy(
    """Get the object by its global ID"""
    id: ID

    """Get the mediaItem by its database ID"""
    mediaItemId: Int

    """Get the mediaItem by its uri"""
    uri: String

    """
    Get the mediaItem by its slug (only available for non-hierarchical types)
    """
    slug: String
  ): wpGraphQl_MediaItem @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """Connection between the RootQuery type and the mediaItem type"""
  mediaItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToMediaItemConnectionWhereArgs
  ): wpGraphQl_RootQueryToMediaItemConnection

  """A WordPress navigation menu"""
  menu(
    """The globally unique identifier of the menu."""
    id: ID!

    """Type of unique identifier to fetch a menu by. Default is Global ID"""
    idType: wpGraphQl_MenuNodeIdTypeEnum
  ): wpGraphQl_Menu

  """A WordPress navigation menu item"""
  menuItem(
    """The globally unique identifier of the menu item."""
    id: ID!

    """
    Type of unique identifier to fetch a menu item by. Default is Global ID
    """
    idType: wpGraphQl_MenuItemNodeIdTypeEnum
  ): wpGraphQl_MenuItem

  """Connection between the RootQuery type and the MenuItem type"""
  menuItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToMenuItemConnectionWhereArgs
  ): wpGraphQl_RootQueryToMenuItemConnection

  """Connection between the RootQuery type and the Menu type"""
  menus(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToMenuConnectionWhereArgs
  ): wpGraphQl_RootQueryToMenuConnection

  """Fetches an object given its ID"""
  node(
    """The unique identifier of the node"""
    id: ID
  ): wpGraphQl_Node

  """Fetches an object given its Unique Resource Identifier"""
  nodeByUri(
    """
    Unique Resource Identifier in the form of a path or permalink for a node. Ex: "/hello-world"
    """
    uri: String!
  ): wpGraphQl_UniformResourceIdentifiable

  """A page object"""
  pageBy(
    """Get the object by its global ID"""
    id: ID

    """Get the page by its database ID"""
    pageId: Int

    """Get the page by its uri"""
    uri: String
  ): wpGraphQl_Page @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """Connection between the RootQuery type and the page type"""
  pages(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToPageConnectionWhereArgs
  ): wpGraphQl_RootQueryToPageConnection

  """A WordPress plugin"""
  plugin(
    """The globally unique identifier of the plugin."""
    id: ID!
  ): wpGraphQl_Plugin

  """Connection between the RootQuery type and the Plugin type"""
  plugins(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToPluginConnectionWhereArgs
  ): wpGraphQl_RootQueryToPluginConnection

  """An object of the post Type. """
  post(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: wpGraphQl_PostIdType

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): wpGraphQl_Post

  """A post object"""
  postBy(
    """Get the object by its global ID"""
    id: ID

    """Get the post by its database ID"""
    postId: Int

    """Get the post by its uri"""
    uri: String

    """Get the post by its slug (only available for non-hierarchical types)"""
    slug: String
  ): wpGraphQl_Post @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """A 0bject"""
  postFormat(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: wpGraphQl_PostFormatIdType
  ): wpGraphQl_PostFormat

  """Connection between the RootQuery type and the postFormat type"""
  postFormats(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToPostFormatConnectionWhereArgs
  ): wpGraphQl_RootQueryToPostFormatConnection

  """Connection between the RootQuery type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToPostConnectionWhereArgs
  ): wpGraphQl_RootQueryToPostConnection

  """Fields of the &#039;ReadingSettings&#039; settings group"""
  readingSettings: wpGraphQl_ReadingSettings

  """Connection between the RootQuery type and the EnqueuedScript type"""
  registeredScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_RootQueryToEnqueuedScriptConnection

  """Connection between the RootQuery type and the EnqueuedStylesheet type"""
  registeredStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_RootQueryToEnqueuedStylesheetConnection

  """
  Connection between the RootQuery type and the ContentRevisionUnion type
  """
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToContentRevisionUnionConnectionWhereArgs
  ): wpGraphQl_RootQueryToContentRevisionUnionConnection

  """A 0bject"""
  tag(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: wpGraphQl_TagIdType
  ): wpGraphQl_Tag

  """Connection between the RootQuery type and the tag type"""
  tags(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToTagConnectionWhereArgs
  ): wpGraphQl_RootQueryToTagConnection

  """Connection between the RootQuery type and the Taxonomy type"""
  taxonomies(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_RootQueryToTaxonomyConnection

  """Fetch a Taxonomy node by unique Identifier"""
  taxonomy(
    """Unique Identifier for the Taxonomy node."""
    id: ID!

    """Type of unique identifier to fetch a taxonomy by. Default is Global ID"""
    idType: wpGraphQl_TaxonomyIdTypeEnum
  ): wpGraphQl_Taxonomy

  """A node in a taxonomy used to group and relate content nodes"""
  termNode(
    """Unique identifier for the term node."""
    id: ID!

    """
    Type of unique identifier to fetch a term node by. Default is Global ID
    """
    idType: wpGraphQl_TermNodeIdTypeEnum

    """
    The taxonomy of the tern node. Required when idType is set to "name" or "slug"
    """
    taxonomy: wpGraphQl_TaxonomyEnum
  ): wpGraphQl_TermNode

  """Connection between the RootQuery type and the TermNode type"""
  terms(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToTermNodeConnectionWhereArgs
  ): wpGraphQl_RootQueryToTermNodeConnection

  """A Theme object"""
  theme(
    """The globally unique identifier of the theme."""
    id: ID!
  ): wpGraphQl_Theme

  """Connection between the RootQuery type and the Theme type"""
  themes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_RootQueryToThemeConnection

  """Returns a user"""
  user(
    """The globally unique identifier of the user."""
    id: ID!

    """Type of unique identifier to fetch a user by. Default is Global ID"""
    idType: wpGraphQl_UserNodeIdTypeEnum
  ): wpGraphQl_User

  """Returns a user role"""
  userRole(
    """The globally unique identifier of the user object."""
    id: ID!
  ): wpGraphQl_UserRole

  """Connection between the RootQuery type and the UserRole type"""
  userRoles(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_RootQueryToUserRoleConnection

  """Connection between the RootQuery type and the User type"""
  users(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_RootQueryToUserConnectionWhereArgs
  ): wpGraphQl_RootQueryToUserConnection

  """Returns the current user"""
  viewer: wpGraphQl_User

  """Fields of the &#039;WritingSettings&#039; settings group"""
  writingSettings: wpGraphQl_WritingSettings
}

"""The root mutation"""
type RootMutation {
  """The payload for the createCategory mutation"""
  createCategory(
    """Input for the createCategory mutation"""
    input: wpGraphQl_CreateCategoryInput!
  ): wpGraphQl_CreateCategoryPayload

  """The payload for the createComment mutation"""
  createComment(
    """Input for the createComment mutation"""
    input: wpGraphQl_CreateCommentInput!
  ): wpGraphQl_CreateCommentPayload

  """The payload for the createMediaItem mutation"""
  createMediaItem(
    """Input for the createMediaItem mutation"""
    input: wpGraphQl_CreateMediaItemInput!
  ): wpGraphQl_CreateMediaItemPayload

  """The payload for the createPage mutation"""
  createPage(
    """Input for the createPage mutation"""
    input: wpGraphQl_CreatePageInput!
  ): wpGraphQl_CreatePagePayload

  """The payload for the createPost mutation"""
  createPost(
    """Input for the createPost mutation"""
    input: wpGraphQl_CreatePostInput!
  ): wpGraphQl_CreatePostPayload

  """The payload for the createPostFormat mutation"""
  createPostFormat(
    """Input for the createPostFormat mutation"""
    input: wpGraphQl_CreatePostFormatInput!
  ): wpGraphQl_CreatePostFormatPayload

  """The payload for the createTag mutation"""
  createTag(
    """Input for the createTag mutation"""
    input: wpGraphQl_CreateTagInput!
  ): wpGraphQl_CreateTagPayload

  """The payload for the createUser mutation"""
  createUser(
    """Input for the createUser mutation"""
    input: wpGraphQl_CreateUserInput!
  ): wpGraphQl_CreateUserPayload

  """The payload for the deleteCategory mutation"""
  deleteCategory(
    """Input for the deleteCategory mutation"""
    input: wpGraphQl_DeleteCategoryInput!
  ): wpGraphQl_DeleteCategoryPayload

  """The payload for the deleteComment mutation"""
  deleteComment(
    """Input for the deleteComment mutation"""
    input: wpGraphQl_DeleteCommentInput!
  ): wpGraphQl_DeleteCommentPayload

  """The payload for the deleteMediaItem mutation"""
  deleteMediaItem(
    """Input for the deleteMediaItem mutation"""
    input: wpGraphQl_DeleteMediaItemInput!
  ): wpGraphQl_DeleteMediaItemPayload

  """The payload for the deletePage mutation"""
  deletePage(
    """Input for the deletePage mutation"""
    input: wpGraphQl_DeletePageInput!
  ): wpGraphQl_DeletePagePayload

  """The payload for the deletePost mutation"""
  deletePost(
    """Input for the deletePost mutation"""
    input: wpGraphQl_DeletePostInput!
  ): wpGraphQl_DeletePostPayload

  """The payload for the deletePostFormat mutation"""
  deletePostFormat(
    """Input for the deletePostFormat mutation"""
    input: wpGraphQl_DeletePostFormatInput!
  ): wpGraphQl_DeletePostFormatPayload

  """The payload for the deleteTag mutation"""
  deleteTag(
    """Input for the deleteTag mutation"""
    input: wpGraphQl_DeleteTagInput!
  ): wpGraphQl_DeleteTagPayload

  """The payload for the deleteUser mutation"""
  deleteUser(
    """Input for the deleteUser mutation"""
    input: wpGraphQl_DeleteUserInput!
  ): wpGraphQl_DeleteUserPayload

  """Increase the count."""
  increaseCount(
    """The count to increase"""
    count: Int
  ): Int

  """The payload for the registerUser mutation"""
  registerUser(
    """Input for the registerUser mutation"""
    input: wpGraphQl_RegisterUserInput!
  ): wpGraphQl_RegisterUserPayload

  """The payload for the resetUserPassword mutation"""
  resetUserPassword(
    """Input for the resetUserPassword mutation"""
    input: wpGraphQl_ResetUserPasswordInput!
  ): wpGraphQl_ResetUserPasswordPayload

  """The payload for the restoreComment mutation"""
  restoreComment(
    """Input for the restoreComment mutation"""
    input: wpGraphQl_RestoreCommentInput!
  ): wpGraphQl_RestoreCommentPayload

  """The payload for the sendPasswordResetEmail mutation"""
  sendPasswordResetEmail(
    """Input for the sendPasswordResetEmail mutation"""
    input: wpGraphQl_SendPasswordResetEmailInput!
  ): wpGraphQl_SendPasswordResetEmailPayload

  """The payload for the UpdateCategory mutation"""
  updateCategory(
    """Input for the UpdateCategory mutation"""
    input: wpGraphQl_UpdateCategoryInput!
  ): wpGraphQl_UpdateCategoryPayload

  """The payload for the updateComment mutation"""
  updateComment(
    """Input for the updateComment mutation"""
    input: wpGraphQl_UpdateCommentInput!
  ): wpGraphQl_UpdateCommentPayload

  """The payload for the updateMediaItem mutation"""
  updateMediaItem(
    """Input for the updateMediaItem mutation"""
    input: wpGraphQl_UpdateMediaItemInput!
  ): wpGraphQl_UpdateMediaItemPayload

  """The payload for the updatePage mutation"""
  updatePage(
    """Input for the updatePage mutation"""
    input: wpGraphQl_UpdatePageInput!
  ): wpGraphQl_UpdatePagePayload

  """The payload for the updatePost mutation"""
  updatePost(
    """Input for the updatePost mutation"""
    input: wpGraphQl_UpdatePostInput!
  ): wpGraphQl_UpdatePostPayload

  """The payload for the UpdatePostFormat mutation"""
  updatePostFormat(
    """Input for the UpdatePostFormat mutation"""
    input: wpGraphQl_UpdatePostFormatInput!
  ): wpGraphQl_UpdatePostFormatPayload

  """The payload for the updateSettings mutation"""
  updateSettings(
    """Input for the updateSettings mutation"""
    input: wpGraphQl_UpdateSettingsInput!
  ): wpGraphQl_UpdateSettingsPayload

  """The payload for the UpdateTag mutation"""
  updateTag(
    """Input for the UpdateTag mutation"""
    input: wpGraphQl_UpdateTagInput!
  ): wpGraphQl_UpdateTagPayload

  """The payload for the updateUser mutation"""
  updateUser(
    """Input for the updateUser mutation"""
    input: wpGraphQl_UpdateUserInput!
  ): wpGraphQl_UpdateUserPayload
}

input SortArgument {
  by: String! = "date"
  order: SortOrder = DESC
}

enum SortOrder {
  """Sort ascending"""
  ASC

  """Sort descending"""
  DESC
}

input StringQueryOperatorInput {
  """Filter by property of (strict) equality."""
  eq: String

  """Filter by property not equal to provided value."""
  ne: String

  """Filter by property matching any of the provided values."""
  in: [String]

  """Filter by property not matching any of the provided values."""
  nin: [String]

  """
  Filter nodes that contain the field, including nodes where the field value is null.
  """
  exists: Boolean

  """Filter by property matching provided regular expression."""
  regex: String
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type wpGraphQl_Avatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a
  404 instead of a default image), &#039;retro&#039; (8bit),
  &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face),
  &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;,
  &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039;
  (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String

  """HTML attributes to insert in the IMG element. Is not sanitized."""
  extraAttr: String

  """Whether to always show the default image, never the Gravatar."""
  forceDefault: Boolean

  """Whether the avatar was successfully found."""
  foundAvatar: Boolean

  """Height of the avatar image."""
  height: Int

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;,
  &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String

  """Type of url scheme to use. Typically HTTP vs. HTTPS."""
  scheme: String

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int

  """URL for the gravatar image source."""
  url: String

  """Width of the avatar image."""
  width: Int
}

"""
What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are
judged in that order. Default is the value of the 'avatar_rating' option
"""
enum wpGraphQl_AvatarRatingEnum {
  """Indicates a G level avatar rating level."""
  G

  """Indicates a PG level avatar rating level."""
  PG

  """Indicates an R level avatar rating level."""
  R

  """Indicates an X level avatar rating level."""
  X
}

"""The category type"""
type wpGraphQl_Category implements wpGraphQl_Node & wpGraphQl_TermNode & wpGraphQl_UniformResourceIdentifiable & wpGraphQl_DatabaseIdentifier & wpGraphQl_HierarchicalTermNode & wpGraphQl_MenuItemLinkable {
  """
  The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_CategoryToAncestorsCategoryConnection

  """The id field matches the WP_Post-&gt;ID field."""
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the category type and the category type"""
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_CategoryToCategoryConnectionWhereArgs
  ): wpGraphQl_CategoryToCategoryConnection

  """Connection between the category type and the ContentNode type"""
  contentNodes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_CategoryToContentNodeConnectionWhereArgs
  ): wpGraphQl_CategoryToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique resource identifier path"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedStylesheetConnection

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the category type and the category type"""
  parent: wpGraphQl_CategoryToParentCategoryConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the category type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_CategoryToPostConnectionWhereArgs
  ): wpGraphQl_CategoryToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the category type and the Taxonomy type"""
  taxonomy: wpGraphQl_CategoryToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum wpGraphQl_CategoryIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the category type and the category type"""
type wpGraphQl_CategoryToAncestorsCategoryConnection {
  """Edges for the CategoryToAncestorsCategoryConnection connection"""
  edges: [wpGraphQl_CategoryToAncestorsCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Category]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_CategoryToAncestorsCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Category
}

"""Connection between the category type and the category type"""
type wpGraphQl_CategoryToCategoryConnection {
  """Edges for the CategoryToCategoryConnection connection"""
  edges: [wpGraphQl_CategoryToCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Category]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_CategoryToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Category
}

"""Arguments for filtering the CategoryToCategoryConnection connection"""
input wpGraphQl_CategoryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the category type and the ContentNode type"""
type wpGraphQl_CategoryToContentNodeConnection {
  """Edges for the CategoryToContentNodeConnection connection"""
  edges: [wpGraphQl_CategoryToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_CategoryToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentNode
}

"""Arguments for filtering the CategoryToContentNodeConnection connection"""
input wpGraphQl_CategoryToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypesOfCategoryEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the category type and the category type"""
type wpGraphQl_CategoryToParentCategoryConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Category
}

"""Connection between the category type and the post type"""
type wpGraphQl_CategoryToPostConnection {
  """Edges for the CategoryToPostConnection connection"""
  edges: [wpGraphQl_CategoryToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Post]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_CategoryToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Post
}

"""Arguments for filtering the CategoryToPostConnection connection"""
input wpGraphQl_CategoryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the category type and the Taxonomy type"""
type wpGraphQl_CategoryToTaxonomyConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Taxonomy
}

"""A Comment object"""
type wpGraphQl_Comment implements wpGraphQl_Node & wpGraphQl_DatabaseIdentifier {
  """
  User agent used to post the comment. This field is equivalent to
  WP_Comment-&gt;comment_agent and the value matching the
  &quot;comment_agent&quot; column in SQL.
  """
  agent: String

  """
  The approval status of the comment. This field is equivalent to
  WP_Comment-&gt;comment_approved and the value matching the
  &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean

  """The author of the comment"""
  author: wpGraphQl_CommentToCommenterConnectionEdge

  """
  IP address for the author. This field is equivalent to
  WP_Comment-&gt;comment_author_IP and the value matching the
  &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String

  """ID for the comment, unique among comments."""
  commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the Comment type and the ContentNode type"""
  commentedOn: wpGraphQl_CommentToContentNodeConnectionEdge

  """
  Content of the comment. This field is equivalent to
  WP_Comment-&gt;comment_content and the value matching the
  &quot;comment_content&quot; column in SQL.
  """
  content(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """The unique identifier stored in the database"""
  databaseId: Int!

  """
  Date the comment was posted in local time. This field is equivalent to
  WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: String

  """
  Date the comment was posted in GMT. This field is equivalent to
  WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt: String

  """The globally unique identifier for the comment object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  Karma value for the comment. This field is equivalent to
  WP_Comment-&gt;comment_karma and the value matching the
  &quot;comment_karma&quot; column in SQL.
  """
  karma: Int

  """Connection between the Comment type and the Comment type"""
  parent(
    """Arguments for filtering the connection"""
    where: wpGraphQl_CommentToParentCommentConnectionWhereArgs
  ): wpGraphQl_CommentToParentCommentConnectionEdge

  """
  The database id of the parent comment node or null if it is the root comment
  """
  parentDatabaseId: Int

  """The globally unique identifier of the parent comment node."""
  parentId: ID

  """Connection between the Comment type and the Comment type"""
  replies(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_CommentToCommentConnectionWhereArgs
  ): wpGraphQl_CommentToCommentConnection

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and
  the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String
}

"""A Comment Author object"""
type wpGraphQl_CommentAuthor implements wpGraphQl_Node & wpGraphQl_Commenter {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    The size attribute of the avatar field can be used to fetch avatars of
    different sizes. The value corresponds to the dimension in pixels to fetch.
    The default is 96 pixels.
    """
    size: Int = 96

    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean

    """The rating level of the avatar."""
    rating: wpGraphQl_AvatarRatingEnum
  ): wpGraphQl_Avatar

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The email for the comment author"""
  email: String

  """The globally unique identifier for the comment author object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The name for the comment author."""
  name: String

  """The url the comment author."""
  url: String
}

"""The author of a comment"""
interface wpGraphQl_Commenter {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: wpGraphQl_Avatar

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The email address of the author of a comment."""
  email: String

  """The globally unique identifier for the comment author."""
  id: ID!

  """
  Whether the author information is considered restricted. (not fully public)
  """
  isRestricted: Boolean

  """The name of the author of a comment."""
  name: String

  """The url of the author of a comment."""
  url: String
}

"""Options for ordering the connection"""
enum wpGraphQl_CommentsConnectionOrderbyEnum {
  """Order by browser user agent of the commenter."""
  COMMENT_AGENT

  """Order by true/false approval of the comment."""
  COMMENT_APPROVED

  """Order by name of the comment author."""
  COMMENT_AUTHOR

  """Order by e-mail of the comment author."""
  COMMENT_AUTHOR_EMAIL

  """Order by IP address of the comment author."""
  COMMENT_AUTHOR_IP

  """Order by URL address of the comment author."""
  COMMENT_AUTHOR_URL

  """Order by the comment contents."""
  COMMENT_CONTENT

  """Order by date/time timestamp of the comment."""
  COMMENT_DATE

  """Order by GMT timezone date/time timestamp of the comment."""
  COMMENT_DATE_GMT

  """Order by the globally unique identifier for the comment object"""
  COMMENT_ID

  """Order by the array list of comment IDs listed in the where clause."""
  COMMENT_IN

  """Order by the comment karma score."""
  COMMENT_KARMA

  """Order by the comment parent ID."""
  COMMENT_PARENT

  """Order by the post object ID."""
  COMMENT_POST_ID

  """
  Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'.
  """
  COMMENT_TYPE

  """Order by the user ID."""
  USER_ID
}

"""Connection between the Comment type and the Comment type"""
type wpGraphQl_CommentToCommentConnection {
  """Edges for the CommentToCommentConnection connection"""
  edges: [wpGraphQl_CommentToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Comment]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_CommentToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Comment
}

"""Arguments for filtering the CommentToCommentConnection connection"""
input wpGraphQl_CommentToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [wpGraphQl_PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [wpGraphQl_ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum

  """Field to order the comments by."""
  orderby: wpGraphQl_CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the Comment type and the Commenter type"""
type wpGraphQl_CommentToCommenterConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Commenter
}

"""Connection between the Comment type and the ContentNode type"""
type wpGraphQl_CommentToContentNodeConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_ContentNode
}

"""Connection between the Comment type and the Comment type"""
type wpGraphQl_CommentToParentCommentConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Comment
}

"""
Arguments for filtering the CommentToParentCommentConnection connection
"""
input wpGraphQl_CommentToParentCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [wpGraphQl_PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [wpGraphQl_ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum

  """Field to order the comments by."""
  orderby: wpGraphQl_CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Nodes used to manage content"""
interface wpGraphQl_ContentNode {
  """Connection between the ContentNode type and the ContentType type"""
  contentType: wpGraphQl_ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The ID of the node in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: wpGraphQl_ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedStylesheetConnection

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: wpGraphQl_ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: wpGraphQl_ContentTemplate

  """The unique resource identifier path"""
  uri: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum wpGraphQl_ContentNodeIdTypeEnum {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

"""Connection between the ContentNode type and the ContentType type"""
type wpGraphQl_ContentNodeToContentTypeConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_ContentType
}

"""Connection between the ContentNode type and the User type"""
type wpGraphQl_ContentNodeToEditLastConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_User
}

"""Connection between the ContentNode type and the User type"""
type wpGraphQl_ContentNodeToEditLockConnectionEdge {
  """The timestamp for when the node was last edited"""
  lockTimestamp: String

  """The node of the connection, without the edges"""
  node: wpGraphQl_User
}

"""Connection between the ContentNode type and the EnqueuedScript type"""
type wpGraphQl_ContentNodeToEnqueuedScriptConnection {
  """Edges for the ContentNodeToEnqueuedScriptConnection connection"""
  edges: [wpGraphQl_ContentNodeToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_ContentNodeToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedScript
}

"""
Connection between the ContentNode type and the EnqueuedStylesheet type
"""
type wpGraphQl_ContentNodeToEnqueuedStylesheetConnection {
  """Edges for the ContentNodeToEnqueuedStylesheetConnection connection"""
  edges: [wpGraphQl_ContentNodeToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_ContentNodeToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedStylesheet
}

"""A union of Content Node Types that support revisions"""
union wpGraphQl_ContentRevisionUnion = wpGraphQl_Post | wpGraphQl_Page

"""The template assigned to a node of content"""
interface wpGraphQl_ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""An Post Type object"""
type wpGraphQl_ContentType implements wpGraphQl_Node & wpGraphQl_UniformResourceIdentifiable {
  """Whether this content type should can be exported."""
  canExport: Boolean

  """Connection between the ContentType type and the Taxonomy type"""
  connectedTaxonomies(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentTypeToTaxonomyConnection

  """Connection between the ContentType type and the ContentNode type"""
  contentNodes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_ContentTypeToContentNodeConnectionWhereArgs
  ): wpGraphQl_ContentTypeToContentNodeConnection

  """
  Whether content of this type should be deleted when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean

  """Description of the content type."""
  description: String

  """
  Whether to exclude nodes of this content type from front end search results.
  """
  excludeFromSearch: Boolean

  """The plural name of the content type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the content type within the GraphQL Schema."""
  graphqlSingleName: String

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean

  """Whether the content type is hierarchical, for example pages."""
  hierarchical: Boolean

  """The globally unique identifier of the post-type object."""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """Display name of the content type."""
  label: String

  """Details about the content type labels."""
  labels: wpGraphQl_PostTypeLabelDetails

  """The name of the icon file to display as a menu icon."""
  menuIcon: String

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String

  """
  Whether a content type is intended for use publicly either via the admin
  interface or by front-end users. While the default settings of
  exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are
  inherited from public, each does not rely on this relationship and controls a
  very specific intention.
  """
  public: Boolean

  """
  Whether queries can be performed on the front end for the content type as part of parse_request().
  """
  publiclyQueryable: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """Makes this content type available via the admin bar."""
  showInAdminBar: Boolean

  """Whether to add the content type to the GraphQL Schema."""
  showInGraphql: Boolean

  """
  Where to show the content type in the admin menu. To work, $show_ui must be
  true. If true, the post type is shown in its own top level menu. If false, no
  menu is shown. If a string of an existing top level menu (eg.
  &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type
  will be placed as a sub-menu of that.
  """
  showInMenu: Boolean

  """Makes this content type available for selection in navigation menus."""
  showInNavMenus: Boolean

  """
  Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing this content type in the admin.
  """
  showUi: Boolean

  """The unique resource identifier path"""
  uri: String
}

"""Allowed Content Types"""
enum wpGraphQl_ContentTypeEnum {
  """The Type of Content object"""
  ATTACHMENT

  """The Type of Content object"""
  PAGE

  """The Type of Content object"""
  POST
}

"""
The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID".
"""
enum wpGraphQl_ContentTypeIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the content type."""
  NAME
}

"""Allowed Content Types of the Category taxonomy."""
enum wpGraphQl_ContentTypesOfCategoryEnum {
  """The Type of Content object"""
  POST
}

"""Allowed Content Types of the PostFormat taxonomy."""
enum wpGraphQl_ContentTypesOfPostFormatEnum {
  """The Type of Content object"""
  POST
}

"""Allowed Content Types of the Tag taxonomy."""
enum wpGraphQl_ContentTypesOfTagEnum {
  """The Type of Content object"""
  POST
}

"""Connection between the ContentType type and the ContentNode type"""
type wpGraphQl_ContentTypeToContentNodeConnection {
  """Edges for the ContentTypeToContentNodeConnection connection"""
  edges: [wpGraphQl_ContentTypeToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_ContentTypeToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentNode
}

"""
Arguments for filtering the ContentTypeToContentNodeConnection connection
"""
input wpGraphQl_ContentTypeToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the ContentType type and the Taxonomy type"""
type wpGraphQl_ContentTypeToTaxonomyConnection {
  """Edges for the ContentTypeToTaxonomyConnection connection"""
  edges: [wpGraphQl_ContentTypeToTaxonomyConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Taxonomy]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_ContentTypeToTaxonomyConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Taxonomy
}

"""Input for the createCategory mutation"""
input wpGraphQl_CreateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the category object"""
  description: String

  """The name of the category object to mutate"""
  name: String!

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createCategory mutation"""
type wpGraphQl_CreateCategoryPayload {
  """The created category"""
  category: wpGraphQl_Category

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""Input for the createComment mutation"""
input wpGraphQl_CreateCommentInput {
  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """The url of the comment's author."""
  authorUrl: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The database ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g.
  01/31/2017 ) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17 
  """
  date: String

  """Parent comment ID of current comment."""
  parent: ID

  """Type of comment."""
  type: String
}

"""The payload for the createComment mutation"""
type wpGraphQl_CreateCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment that was created"""
  comment: wpGraphQl_Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server
  will not return the comment to a non authenticated user, but a success message
  can be returned if the create succeeded, and the client can optimistically add
  the comment to the client cache
  """
  success: Boolean
}

"""Input for the createMediaItem mutation"""
input wpGraphQl_CreateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: wpGraphQl_MimeTypeEnum

  """The ID of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: wpGraphQl_MediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the createMediaItem mutation"""
type wpGraphQl_CreateMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The MediaItem object mutation type."""
  mediaItem: wpGraphQl_MediaItem
}

"""Input for the createPage mutation"""
input wpGraphQl_CreatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17 
  """
  date: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: wpGraphQl_PostStatusEnum

  """The title of the object"""
  title: String
}

"""The payload for the createPage mutation"""
type wpGraphQl_CreatePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  page: wpGraphQl_Page
}

"""Input for the createPostFormat mutation"""
input wpGraphQl_CreatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_format object"""
  description: String

  """The name of the post_format object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createPostFormat mutation"""
type wpGraphQl_CreatePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_format"""
  postFormat: wpGraphQl_PostFormat
}

"""Input for the createPost mutation"""
input wpGraphQl_CreatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: wpGraphQl_PostCategoriesInput

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17 
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: wpGraphQl_PostPostFormatsInput

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: wpGraphQl_PostStatusEnum

  """Set connections between the post and tags"""
  tags: wpGraphQl_PostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the createPost mutation"""
type wpGraphQl_CreatePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  post: wpGraphQl_Post
}

"""Input for the createTag mutation"""
input wpGraphQl_CreateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_tag object"""
  description: String

  """The name of the post_tag object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createTag mutation"""
type wpGraphQl_CreateTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_tag"""
  tag: wpGraphQl_Tag
}

"""Input for the createUser mutation"""
input wpGraphQl_CreateUserInput {
  """User's AOL IM account."""
  aim: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string that contains the user's username for logging in."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the createUser mutation"""
type wpGraphQl_CreateUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: wpGraphQl_User
}

"""Object that can be identified with a Database ID"""
interface wpGraphQl_DatabaseIdentifier {
  """The unique identifier stored in the database"""
  databaseId: Int!
}

"""Date values"""
input wpGraphQl_DateInput {
  """Day of the month (from 1 to 31)"""
  day: Int

  """Month number (from 1 to 12)"""
  month: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""Filter the connection based on input"""
input wpGraphQl_DateQueryInput {
  """Nodes should be returned after this date"""
  after: wpGraphQl_DateInput

  """Nodes should be returned before this date"""
  before: wpGraphQl_DateInput

  """Column to query against"""
  column: wpGraphQl_PostObjectsConnectionDateColumnEnum

  """For after/before, whether exact value should be matched or not"""
  compare: String

  """Day of the month (from 1 to 31)"""
  day: Int

  """Hour (from 0 to 23)"""
  hour: Int

  """For after/before, whether exact value should be matched or not"""
  inclusive: Boolean

  """Minute (from 0 to 59)"""
  minute: Int

  """Month number (from 1 to 12)"""
  month: Int

  """OR or AND, how the sub-arrays should be compared"""
  relation: wpGraphQl_RelationEnum

  """Second (0 to 59)"""
  second: Int

  """Week of the year (from 0 to 53)"""
  week: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""The template assigned to the node"""
type wpGraphQl_DefaultTemplate implements wpGraphQl_ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""Input for the deleteCategory mutation"""
input wpGraphQl_DeleteCategoryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the category to delete"""
  id: ID!
}

"""The payload for the deleteCategory mutation"""
type wpGraphQl_DeleteCategoryPayload {
  """The deteted term object"""
  category: wpGraphQl_Category

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID
}

"""Input for the deleteComment mutation"""
input wpGraphQl_DeleteCommentInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the comment should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The deleted comment ID"""
  id: ID!
}

"""The payload for the deleteComment mutation"""
type wpGraphQl_DeleteCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The deleted comment object"""
  comment: wpGraphQl_Comment

  """The deleted comment ID"""
  deletedId: ID
}

"""Input for the deleteMediaItem mutation"""
input wpGraphQl_DeleteMediaItemInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the mediaItem should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the mediaItem to delete"""
  id: ID!
}

"""The payload for the deleteMediaItem mutation"""
type wpGraphQl_DeleteMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted mediaItem"""
  deletedId: ID

  """The mediaItem before it was deleted"""
  mediaItem: wpGraphQl_MediaItem
}

"""Input for the deletePage mutation"""
input wpGraphQl_DeletePageInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the page to delete"""
  id: ID!
}

"""The payload for the deletePage mutation"""
type wpGraphQl_DeletePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The object before it was deleted"""
  page: wpGraphQl_Page
}

"""Input for the deletePostFormat mutation"""
input wpGraphQl_DeletePostFormatInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the postFormat to delete"""
  id: ID!
}

"""The payload for the deletePostFormat mutation"""
type wpGraphQl_DeletePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  postFormat: wpGraphQl_PostFormat
}

"""Input for the deletePost mutation"""
input wpGraphQl_DeletePostInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the post to delete"""
  id: ID!
}

"""The payload for the deletePost mutation"""
type wpGraphQl_DeletePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The object before it was deleted"""
  post: wpGraphQl_Post
}

"""Input for the deleteTag mutation"""
input wpGraphQl_DeleteTagInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the tag to delete"""
  id: ID!
}

"""The payload for the deleteTag mutation"""
type wpGraphQl_DeleteTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  tag: wpGraphQl_Tag
}

"""Input for the deleteUser mutation"""
input wpGraphQl_DeleteUserInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the user you want to delete"""
  id: ID!

  """Reassign posts and links to new User ID."""
  reassignId: ID
}

"""The payload for the deleteUser mutation"""
type wpGraphQl_DeleteUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the user that you just deleted"""
  deletedId: ID

  """The deleted user object"""
  user: wpGraphQl_User
}

"""The discussion setting type"""
type wpGraphQl_DiscussionSettings {
  """Allow people to submit comments on new posts."""
  defaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  defaultPingStatus: String
}

"""Asset enqueued by the CMS"""
interface wpGraphQl_EnqueuedAsset {
  """@todo"""
  args: Boolean

  """Dependencies needed to use this asset"""
  dependencies: [wpGraphQl_EnqueuedScript]

  """Extra information needed for the script"""
  extra: String

  """The handle of the enqueued asset"""
  handle: String

  """The ID of the enqueued asset"""
  id: ID!

  """The source of the asset"""
  src: String

  """The version of the enqueued asset"""
  version: String
}

"""Script enqueued by the CMS"""
type wpGraphQl_EnqueuedScript implements wpGraphQl_Node & wpGraphQl_EnqueuedAsset {
  """@todo"""
  args: Boolean

  """Dependencies needed to use this asset"""
  dependencies: [wpGraphQl_EnqueuedScript]

  """Extra information needed for the script"""
  extra: String

  """The handle of the enqueued asset"""
  handle: String

  """The ID of the enqueued asset"""
  id: ID!

  """The source of the asset"""
  src: String

  """The version of the enqueued asset"""
  version: String
}

"""Stylesheet enqueued by the CMS"""
type wpGraphQl_EnqueuedStylesheet implements wpGraphQl_Node & wpGraphQl_EnqueuedAsset {
  """@todo"""
  args: Boolean

  """Dependencies needed to use this asset"""
  dependencies: [wpGraphQl_EnqueuedScript]

  """Extra information needed for the script"""
  extra: String

  """The handle of the enqueued asset"""
  handle: String

  """The ID of the enqueued asset"""
  id: ID!

  """The source of the asset"""
  src: String

  """The version of the enqueued asset"""
  version: String
}

"""The template assigned to the node"""
type wpGraphQl_FrontPageTemplate implements wpGraphQl_ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The general setting type"""
type wpGraphQl_GeneralSettings {
  """A date format for all date strings."""
  dateFormat: String

  """Site tagline."""
  description: String

  """This address is used for admin purposes, like new user notification."""
  email: String

  """WordPress locale code."""
  language: String

  """A day number of the week that the week should start on."""
  startOfWeek: Int

  """A time format for all time strings."""
  timeFormat: String

  """A city in the same timezone as you."""
  timezone: String

  """Site title."""
  title: String

  """Site URL."""
  url: String
}

"""Content node with hierarchical (parent/child) relationships"""
interface wpGraphQl_HierarchicalContentNode {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnection

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnection

  """The parent of the node. The parent object can be of various types"""
  parent: wpGraphQl_HierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnection {
  """
  Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection
  """
  edges: [wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentNode
}

"""
Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection
"""
input wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnection {
  """
  Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection
  """
  edges: [wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentNode
}

"""
Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection
"""
input wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type wpGraphQl_HierarchicalContentNodeToParentContentNodeConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_ContentNode
}

"""Term node with hierarchical (parent/child) relationships"""
interface wpGraphQl_HierarchicalTermNode {
  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

"""File details for a Media Item"""
type wpGraphQl_MediaDetails {
  """The filename of the mediaItem"""
  file: String

  """The height of the mediaItem"""
  height: Int

  """Meta information associated with the mediaItem"""
  meta: wpGraphQl_MediaItemMeta

  """The available sizes of the mediaItem"""
  sizes: [wpGraphQl_MediaSize]

  """The width of the mediaItem"""
  width: Int
}

"""The mediaItem type"""
type wpGraphQl_MediaItem implements wpGraphQl_Node & wpGraphQl_ContentNode & wpGraphQl_UniformResourceIdentifiable & wpGraphQl_DatabaseIdentifier & wpGraphQl_NodeWithTemplate & wpGraphQl_NodeWithTitle & wpGraphQl_NodeWithAuthor & wpGraphQl_NodeWithComments & wpGraphQl_HierarchicalContentNode {
  """Alternative text to display when resource is not displayed"""
  altText: String

  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: wpGraphQl_NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The caption for the resource"""
  caption(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the mediaItem type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_MediaItemToCommentConnectionWhereArgs
  ): wpGraphQl_MediaItemToCommentConnection

  """Connection between the ContentNode type and the ContentType type"""
  contentType: wpGraphQl_ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """Description of the image (stored as post_content)"""
  description(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: wpGraphQl_ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedStylesheetConnection

  """The filesize in bytes of the resource"""
  fileSize(
    """Size of the MediaItem to return"""
    size: wpGraphQl_MediaItemSizeEnum
  ): Int

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique identifier of the attachment object."""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: wpGraphQl_ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """Details about the mediaItem"""
  mediaDetails: wpGraphQl_MediaDetails

  """The id field matches the WP_Post-&gt;ID field."""
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Url of the mediaItem"""
  mediaItemUrl: String

  """Type of resource"""
  mediaType: String

  """The mime type of the mediaItem"""
  mimeType: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The parent of the node. The parent object can be of various types"""
  parent: wpGraphQl_HierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """The sizes attribute value for an image."""
  sizes(
    """Size of the MediaItem to calculate sizes with"""
    size: wpGraphQl_MediaItemSizeEnum
  ): String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """Url of the mediaItem"""
  sourceUrl(
    """Size of the MediaItem to return"""
    size: wpGraphQl_MediaItemSizeEnum
  ): String

  """
  The srcset attribute specifies the URL of the image to use in different
  situations. It is a comma separated string of urls and their widths.
  """
  srcSet(
    """Size of the MediaItem to calculate srcSet with"""
    size: wpGraphQl_MediaItemSizeEnum
  ): String

  """The current status of the object"""
  status: String

  """The template assigned to the node"""
  template: wpGraphQl_ContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """The unique resource identifier path"""
  uri: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum wpGraphQl_MediaItemIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG

  """Identify a media item by its source url"""
  SOURCE_URL

  """Identify a resource by the URI."""
  URI
}

"""Meta connected to a MediaItem"""
type wpGraphQl_MediaItemMeta {
  """Aperture measurement of the media item."""
  aperture: Float

  """Information about the camera used to create the media item."""
  camera: String

  """The text string description associated with the media item."""
  caption: String

  """Copyright information associated with the media item."""
  copyright: String

  """The date/time when the media was created."""
  createdTimestamp: Int

  """The original creator of the media item."""
  credit: String

  """The focal length value of the media item."""
  focalLength: Float

  """
  The ISO (International Organization for Standardization) value of the media item.
  """
  iso: Int

  """List of keywords used to describe or identfy the media item."""
  keywords: [String]

  """The vertical or horizontal aspect of the media item."""
  orientation: String

  """The shutter speed information of the media item."""
  shutterSpeed: Float

  """A useful title for the media item."""
  title: String
}

"""The size of the media item object."""
enum wpGraphQl_MediaItemSizeEnum {
  """MediaItem with the large size"""
  LARGE

  """MediaItem with the medium size"""
  MEDIUM

  """MediaItem with the medium_large size"""
  MEDIUM_LARGE

  """MediaItem with the thumbnail size"""
  THUMBNAIL

  """MediaItem with the 1536x1536 size"""
  _1536X1536

  """MediaItem with the 2048x2048 size"""
  _2048X2048
}

"""The status of the media item object."""
enum wpGraphQl_MediaItemStatusEnum {
  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the inherit status"""
  INHERIT

  """Objects with the private status"""
  PRIVATE

  """Objects with the trash status"""
  TRASH
}

"""Connection between the mediaItem type and the Comment type"""
type wpGraphQl_MediaItemToCommentConnection {
  """Edges for the MediaItemToCommentConnection connection"""
  edges: [wpGraphQl_MediaItemToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Comment]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_MediaItemToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Comment
}

"""Arguments for filtering the MediaItemToCommentConnection connection"""
input wpGraphQl_MediaItemToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [wpGraphQl_PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [wpGraphQl_ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum

  """Field to order the comments by."""
  orderby: wpGraphQl_CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Details of an available size for a media item"""
type wpGraphQl_MediaSize {
  """The filename of the referenced size"""
  file: String

  """The filesize of the resource"""
  fileSize: Int

  """The height of the referenced size"""
  height: String

  """The mime type of the referenced size"""
  mimeType: String

  """The referenced size name"""
  name: String

  """The url of the referenced size"""
  sourceUrl: String

  """The width of the referenced size"""
  width: String
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu
locations, which are typically registered by the active theme.
"""
type wpGraphQl_Menu implements wpGraphQl_Node & wpGraphQl_DatabaseIdentifier {
  """The number of items in the menu"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The globally unique identifier of the nav menu object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The locations a menu is assigned to"""
  locations: [wpGraphQl_MenuLocationEnum]

  """WP ID of the nav menu."""
  menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Connection between the Menu type and the MenuItem type"""
  menuItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_MenuToMenuItemConnectionWhereArgs
  ): wpGraphQl_MenuToMenuItemConnection

  """Display name of the menu. Equivalent to WP_Term-&gt;name."""
  name: String

  """The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"""
  slug: String
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type wpGraphQl_MenuItem implements wpGraphQl_Node & wpGraphQl_DatabaseIdentifier {
  """Connection between the MenuItem type and the MenuItem type"""
  childItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_MenuItemToMenuItemConnectionWhereArgs
  ): wpGraphQl_MenuItemToMenuItemConnection

  """Connection from MenuItem to it&#039;s connected node"""
  connectedNode: wpGraphQl_MenuItemToMenuItemLinkableConnectionEdge

  """The object connected to this menu item."""
  connectedObject: wpGraphQl_MenuItemObjectUnion @deprecated(reason: "Deprecated in favor of the connectedNode field")

  """Class attribute for the menu item link"""
  cssClasses: [String]

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Description of the menu item."""
  description: String

  """The globally unique identifier of the nav menu item object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Label or title of the menu item."""
  label: String

  """Link relationship (XFN) of the menu item."""
  linkRelationship: String

  """The locations the menu item&#039;s Menu is assigned to"""
  locations: [wpGraphQl_MenuLocationEnum]

  """The Menu a MenuItem is part of"""
  menu: wpGraphQl_MenuItemToMenuConnectionEdge

  """WP ID of the menu item."""
  menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Menu item order"""
  order: Int

  """The database id of the parent menu item or null if it is the root"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent nav menu item object."""
  parentId: ID

  """
  Path for the resource. Relative path for internal resources. Absolute path for external resources.
  """
  path: String

  """Target attribute for the menu item link."""
  target: String

  """Title attribute for the menu item link"""
  title: String

  """The uri of the resource the menu item links to"""
  uri: String

  """URL or destination of the menu item."""
  url: String
}

"""Nodes that can be linked to as Menu Items"""
interface wpGraphQl_MenuItemLinkable {
  """The unique resource identifier path"""
  databaseId: Int!

  """The unique resource identifier path"""
  id: ID!

  """The unique resource identifier path"""
  uri: String
}

"""
The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field.
"""
enum wpGraphQl_MenuItemNodeIdTypeEnum {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID
}

"""Deprecated in favor of MenuItemLinkeable Interface"""
union wpGraphQl_MenuItemObjectUnion = wpGraphQl_Post | wpGraphQl_Page | wpGraphQl_Category | wpGraphQl_Tag | wpGraphQl_PostFormat

"""Connection between the MenuItem type and the Menu type"""
type wpGraphQl_MenuItemToMenuConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Menu
}

"""Connection between the MenuItem type and the MenuItem type"""
type wpGraphQl_MenuItemToMenuItemConnection {
  """Edges for the MenuItemToMenuItemConnection connection"""
  edges: [wpGraphQl_MenuItemToMenuItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_MenuItem]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_MenuItemToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_MenuItem
}

"""Arguments for filtering the MenuItemToMenuItemConnection connection"""
input wpGraphQl_MenuItemToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: wpGraphQl_MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""Connection between the MenuItem type and the MenuItemLinkable type"""
type wpGraphQl_MenuItemToMenuItemLinkableConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_MenuItemLinkable
}

"""Registered menu locations"""
enum wpGraphQl_MenuLocationEnum {
  """Put the menu in the footer-section location"""
  FOOTER_SECTION

  """Put the menu in the primary location"""
  PRIMARY

  """Put the menu in the right-section location"""
  RIGHT_SECTION
}

"""
The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field.
"""
enum wpGraphQl_MenuNodeIdTypeEnum {
  """Identify a menu node by the Database ID."""
  DATABASE_ID

  """Identify a menu node by the (hashed) Global ID."""
  ID

  """Identify a menu node by it's name"""
  NAME
}

"""Connection between the Menu type and the MenuItem type"""
type wpGraphQl_MenuToMenuItemConnection {
  """Edges for the MenuToMenuItemConnection connection"""
  edges: [wpGraphQl_MenuToMenuItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_MenuItem]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_MenuToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_MenuItem
}

"""Arguments for filtering the MenuToMenuItemConnection connection"""
input wpGraphQl_MenuToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: wpGraphQl_MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""The MimeType of the object"""
enum wpGraphQl_MimeTypeEnum {
  """MimeType application/java"""
  APPLICATION_JAVA

  """MimeType application/msword"""
  APPLICATION_MSWORD

  """MimeType application/octet-stream"""
  APPLICATION_OCTET_STREAM

  """MimeType application/onenote"""
  APPLICATION_ONENOTE

  """MimeType application/oxps"""
  APPLICATION_OXPS

  """MimeType application/pdf"""
  APPLICATION_PDF

  """MimeType application/rar"""
  APPLICATION_RAR

  """MimeType application/rtf"""
  APPLICATION_RTF

  """MimeType application/ttaf+xml"""
  APPLICATION_TTAF_XML

  """MimeType application/vnd.apple.keynote"""
  APPLICATION_VND_APPLE_KEYNOTE

  """MimeType application/vnd.apple.numbers"""
  APPLICATION_VND_APPLE_NUMBERS

  """MimeType application/vnd.apple.pages"""
  APPLICATION_VND_APPLE_PAGES

  """MimeType application/vnd.ms-access"""
  APPLICATION_VND_MS_ACCESS

  """MimeType application/vnd.ms-excel"""
  APPLICATION_VND_MS_EXCEL

  """MimeType application/vnd.ms-excel.addin.macroEnabled.12"""
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12

  """MimeType application/vnd.ms-excel.sheet.binary.macroEnabled.12"""
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12

  """MimeType application/vnd.ms-excel.sheet.macroEnabled.12"""
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12

  """MimeType application/vnd.ms-excel.template.macroEnabled.12"""
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12

  """MimeType application/vnd.ms-powerpoint"""
  APPLICATION_VND_MS_POWERPOINT

  """MimeType application/vnd.ms-powerpoint.addin.macroEnabled.12"""
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12

  """MimeType application/vnd.ms-powerpoint.presentation.macroEnabled.12"""
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12

  """MimeType application/vnd.ms-powerpoint.slideshow.macroEnabled.12"""
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12

  """MimeType application/vnd.ms-powerpoint.slide.macroEnabled.12"""
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12

  """MimeType application/vnd.ms-powerpoint.template.macroEnabled.12"""
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12

  """MimeType application/vnd.ms-project"""
  APPLICATION_VND_MS_PROJECT

  """MimeType application/vnd.ms-word.document.macroEnabled.12"""
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12

  """MimeType application/vnd.ms-word.template.macroEnabled.12"""
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12

  """MimeType application/vnd.ms-write"""
  APPLICATION_VND_MS_WRITE

  """MimeType application/vnd.ms-xpsdocument"""
  APPLICATION_VND_MS_XPSDOCUMENT

  """MimeType application/vnd.oasis.opendocument.chart"""
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART

  """MimeType application/vnd.oasis.opendocument.database"""
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE

  """MimeType application/vnd.oasis.opendocument.formula"""
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA

  """MimeType application/vnd.oasis.opendocument.graphics"""
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS

  """MimeType application/vnd.oasis.opendocument.presentation"""
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION

  """MimeType application/vnd.oasis.opendocument.spreadsheet"""
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET

  """MimeType application/vnd.oasis.opendocument.text"""
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT

  """
  MimeType application/vnd.openxmlformats-officedocument.presentationml.presentation
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION

  """
  MimeType application/vnd.openxmlformats-officedocument.presentationml.slide
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE

  """
  MimeType application/vnd.openxmlformats-officedocument.presentationml.slideshow
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW

  """
  MimeType application/vnd.openxmlformats-officedocument.presentationml.template
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE

  """
  MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET

  """
  MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.template
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE

  """
  MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.document
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT

  """
  MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.template
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE

  """MimeType application/wordperfect"""
  APPLICATION_WORDPERFECT

  """MimeType application/x-7z-compressed"""
  APPLICATION_X_7Z_COMPRESSED

  """MimeType application/x-gzip"""
  APPLICATION_X_GZIP

  """MimeType application/x-tar"""
  APPLICATION_X_TAR

  """MimeType application/zip"""
  APPLICATION_ZIP

  """MimeType audio/aac"""
  AUDIO_AAC

  """MimeType audio/flac"""
  AUDIO_FLAC

  """MimeType audio/midi"""
  AUDIO_MIDI

  """MimeType audio/mpeg"""
  AUDIO_MPEG

  """MimeType audio/ogg"""
  AUDIO_OGG

  """MimeType audio/wav"""
  AUDIO_WAV

  """MimeType audio/x-matroska"""
  AUDIO_X_MATROSKA

  """MimeType audio/x-ms-wax"""
  AUDIO_X_MS_WAX

  """MimeType audio/x-ms-wma"""
  AUDIO_X_MS_WMA

  """MimeType audio/x-realaudio"""
  AUDIO_X_REALAUDIO

  """MimeType image/bmp"""
  IMAGE_BMP

  """MimeType image/gif"""
  IMAGE_GIF

  """MimeType image/heic"""
  IMAGE_HEIC

  """MimeType image/jpeg"""
  IMAGE_JPEG

  """MimeType image/png"""
  IMAGE_PNG

  """MimeType image/tiff"""
  IMAGE_TIFF

  """MimeType image/webp"""
  IMAGE_WEBP

  """MimeType image/x-icon"""
  IMAGE_X_ICON

  """MimeType text/calendar"""
  TEXT_CALENDAR

  """MimeType text/css"""
  TEXT_CSS

  """MimeType text/csv"""
  TEXT_CSV

  """MimeType text/plain"""
  TEXT_PLAIN

  """MimeType text/richtext"""
  TEXT_RICHTEXT

  """MimeType text/tab-separated-values"""
  TEXT_TAB_SEPARATED_VALUES

  """MimeType text/vtt"""
  TEXT_VTT

  """MimeType video/3gpp"""
  VIDEO_3GPP

  """MimeType video/3gpp2"""
  VIDEO_3GPP2

  """MimeType video/avi"""
  VIDEO_AVI

  """MimeType video/divx"""
  VIDEO_DIVX

  """MimeType video/mp4"""
  VIDEO_MP4

  """MimeType video/mpeg"""
  VIDEO_MPEG

  """MimeType video/ogg"""
  VIDEO_OGG

  """MimeType video/quicktime"""
  VIDEO_QUICKTIME

  """MimeType video/webm"""
  VIDEO_WEBM

  """MimeType video/x-flv"""
  VIDEO_X_FLV

  """MimeType video/x-matroska"""
  VIDEO_X_MATROSKA

  """MimeType video/x-ms-asf"""
  VIDEO_X_MS_ASF

  """MimeType video/x-ms-wm"""
  VIDEO_X_MS_WM

  """MimeType video/x-ms-wmv"""
  VIDEO_X_MS_WMV

  """MimeType video/x-ms-wmx"""
  VIDEO_X_MS_WMX
}

"""An object with an ID"""
interface wpGraphQl_Node {
  """The globally unique ID for the object"""
  id: ID!
}

"""A node that can have an author assigned to it"""
interface wpGraphQl_NodeWithAuthor {
  """Connection between the NodeWithAuthor type and the User type"""
  author: wpGraphQl_NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID
}

"""Connection between the NodeWithAuthor type and the User type"""
type wpGraphQl_NodeWithAuthorToUserConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_User
}

"""A node that can have comments associated with it"""
interface wpGraphQl_NodeWithComments {
  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String
}

"""A node that supports the content editor"""
interface wpGraphQl_NodeWithContentEditor {
  """The content of the post."""
  content(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String
}

"""A node that can have an excerpt"""
interface wpGraphQl_NodeWithExcerpt {
  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String
}

"""A node that can have a featured image set"""
interface wpGraphQl_NodeWithFeaturedImage {
  """Connection between the ContentNode type and the ContentType type"""
  contentType: wpGraphQl_ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: wpGraphQl_ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedStylesheetConnection

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: wpGraphQl_NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: wpGraphQl_ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: wpGraphQl_ContentTemplate

  """The unique resource identifier path"""
  uri: String
}

"""
Connection between the NodeWithFeaturedImage type and the MediaItem type
"""
type wpGraphQl_NodeWithFeaturedImageToMediaItemConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_MediaItem
}

"""A node that can have page attributes"""
interface wpGraphQl_NodeWithPageAttributes {
  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int
}

"""A node that can have revisions"""
interface wpGraphQl_NodeWithRevisions {
  """True if the node is a revision of another node"""
  isRevision: Boolean

  """
  If the current node is a revision, this field exposes the node this is a
  revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: wpGraphQl_NodeWithRevisionsToContentNodeConnectionEdge
}

"""Connection between the NodeWithRevisions type and the ContentNode type"""
type wpGraphQl_NodeWithRevisionsToContentNodeConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_ContentNode
}

"""A node that can have a template associated with it"""
interface wpGraphQl_NodeWithTemplate {
  """The template assigned to the node"""
  template: wpGraphQl_ContentTemplate
}

"""A node that NodeWith a title"""
interface wpGraphQl_NodeWithTitle {
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String
}

"""A node that can have trackbacks and pingbacks"""
interface wpGraphQl_NodeWithTrackbacks {
  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The cardinality of the connection order"""
enum wpGraphQl_OrderEnum {
  """Sort the query result set in an ascending order"""
  ASC

  """Sort the query result set in a descending order"""
  DESC
}

"""The page type"""
type wpGraphQl_Page implements wpGraphQl_Node & wpGraphQl_ContentNode & wpGraphQl_UniformResourceIdentifiable & wpGraphQl_DatabaseIdentifier & wpGraphQl_NodeWithTemplate & wpGraphQl_NodeWithTitle & wpGraphQl_NodeWithContentEditor & wpGraphQl_NodeWithAuthor & wpGraphQl_NodeWithFeaturedImage & wpGraphQl_NodeWithComments & wpGraphQl_NodeWithRevisions & wpGraphQl_NodeWithPageAttributes & wpGraphQl_HierarchicalContentNode & wpGraphQl_MenuItemLinkable {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): wpGraphQl_HierarchicalContentNodeToContentNodeAncestorsConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: wpGraphQl_NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): wpGraphQl_HierarchicalContentNodeToContentNodeChildrenConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the page type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PageToCommentConnectionWhereArgs
  ): wpGraphQl_PageToCommentConnection

  """The content of the post."""
  content(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: wpGraphQl_ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique resource identifier path"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: wpGraphQl_ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedStylesheetConnection

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: wpGraphQl_NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique identifier of the page object."""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether this page is set to the privacy page."""
  isPrivacyPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: wpGraphQl_ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The id field matches the WP_Post-&gt;ID field."""
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """The parent of the node. The parent object can be of various types"""
  parent: wpGraphQl_HierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the page type and the page type"""
  preview: wpGraphQl_PageToPreviewConnectionEdge

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  If the current node is a revision, this field exposes the node this is a
  revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: wpGraphQl_NodeWithRevisionsToContentNodeConnectionEdge

  """Connection between the page type and the page type"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PageToRevisionConnectionWhereArgs
  ): wpGraphQl_PageToRevisionConnection

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: wpGraphQl_ContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """The unique resource identifier path"""
  uri: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum wpGraphQl_PageIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

"""Connection between the page type and the Comment type"""
type wpGraphQl_PageToCommentConnection {
  """Edges for the PageToCommentConnection connection"""
  edges: [wpGraphQl_PageToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Comment]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PageToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Comment
}

"""Arguments for filtering the PageToCommentConnection connection"""
input wpGraphQl_PageToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [wpGraphQl_PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [wpGraphQl_ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum

  """Field to order the comments by."""
  orderby: wpGraphQl_CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the page type and the page type"""
type wpGraphQl_PageToPreviewConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Page
}

"""Connection between the page type and the page type"""
type wpGraphQl_PageToRevisionConnection {
  """Edges for the pageToRevisionConnection connection"""
  edges: [wpGraphQl_PageToRevisionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Page]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PageToRevisionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Page
}

"""Arguments for filtering the pageToRevisionConnection connection"""
input wpGraphQl_PageToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""An plugin object"""
type wpGraphQl_Plugin implements wpGraphQl_Node {
  """Name of the plugin author(s), may also be a company name."""
  author: String

  """URI for the related author(s)/company website."""
  authorUri: String

  """Description of the plugin."""
  description: String

  """The globally unique identifier of the plugin object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Display name of the plugin."""
  name: String

  """Plugin path."""
  path: String

  """
  URI for the plugin website. This is useful for directing users for support requests etc.
  """
  pluginUri: String

  """Current version of the plugin."""
  version: String
}

"""The status of the WordPress plugin."""
enum wpGraphQl_PluginStatusEnum {
  """The plugin is currently active."""
  ACTIVE

  """The plugin is a drop-in plugin."""
  DROP_IN

  """The plugin is currently inactive."""
  INACTIVE

  """The plugin is a must-use plugin."""
  MUST_USE

  """The plugin is technically active but was paused while loading."""
  PAUSED

  """The plugin was active recently."""
  RECENTLY_ACTIVE

  """The plugin has an upgrade available."""
  UPGRADE
}

"""The post type"""
type wpGraphQl_Post implements wpGraphQl_Node & wpGraphQl_ContentNode & wpGraphQl_UniformResourceIdentifiable & wpGraphQl_DatabaseIdentifier & wpGraphQl_NodeWithTemplate & wpGraphQl_NodeWithTitle & wpGraphQl_NodeWithContentEditor & wpGraphQl_NodeWithAuthor & wpGraphQl_NodeWithFeaturedImage & wpGraphQl_NodeWithExcerpt & wpGraphQl_NodeWithComments & wpGraphQl_NodeWithTrackbacks & wpGraphQl_NodeWithRevisions & wpGraphQl_MenuItemLinkable {
  """Connection between the NodeWithAuthor type and the User type"""
  author: wpGraphQl_NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """Connection between the post type and the category type"""
  categories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostToCategoryConnectionWhereArgs
  ): wpGraphQl_PostToCategoryConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the post type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostToCommentConnectionWhereArgs
  ): wpGraphQl_PostToCommentConnection

  """The content of the post."""
  content(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: wpGraphQl_ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique resource identifier path"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: wpGraphQl_ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_ContentNodeToEnqueuedStylesheetConnection

  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: wpGraphQl_NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique identifier of the post object."""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether this page is sticky"""
  isSticky: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: wpGraphQl_ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Connection between the post type and the postFormat type"""
  postFormats(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostToPostFormatConnectionWhereArgs
  ): wpGraphQl_PostToPostFormatConnection

  """The id field matches the WP_Post-&gt;ID field."""
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Connection between the post type and the post type"""
  preview: wpGraphQl_PostToPreviewConnectionEdge

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  If the current node is a revision, this field exposes the node this is a
  revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: wpGraphQl_NodeWithRevisionsToContentNodeConnectionEdge

  """Connection between the post type and the post type"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostToRevisionConnectionWhereArgs
  ): wpGraphQl_PostToRevisionConnection

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Connection between the post type and the tag type"""
  tags(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostToTagConnectionWhereArgs
  ): wpGraphQl_PostToTagConnection

  """The template assigned to a node of content"""
  template: wpGraphQl_ContentTemplate

  """Connection between the post type and the TermNode type"""
  terms(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostToTermNodeConnectionWhereArgs
  ): wpGraphQl_PostToTermNodeConnection

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: wpGraphQl_PostObjectFieldFormatEnum
  ): String

  """URLs queued to be pinged."""
  toPing: [String]

  """The unique resource identifier path"""
  uri: String
}

"""Set relationships between the post to categories"""
input wpGraphQl_PostCategoriesInput {
  """
  If true, this will append the category to existing related categories. If
  false, this will replace existing relationships. Default true.
  """
  append: Boolean

  """The input list of items to set."""
  nodes: [wpGraphQl_PostCategoriesNodeInput]
}

"""
List of categories to connect the post to. If an ID is set, it will be used to
create the connection. If not, it will look for a slug. If neither are valid
existing terms, and the site is configured to allow terms to be created during
post mutations, a term will be created using the Name if it exists in the input,
then fallback to the slug if it exists.
"""
input wpGraphQl_PostCategoriesNodeInput {
  """
  The description of the category. This field is used to set a description of
  the category if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the category. If present, this will be used to connect to the post.
  If no existing category exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the category. This field is used to create a new term, if term
  creation is enabled in nested mutations, and if one does not already exist
  with the provided slug or ID or if a slug or ID is not provided. If no name is
  included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the category. If no ID is present, this field will be used to make
  a connection. If no existing term exists with this slug, this field will be
  used as a fallback to the Name field when creating a new term to connect to,
  if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""The postFormat type"""
type wpGraphQl_PostFormat implements wpGraphQl_Node & wpGraphQl_TermNode & wpGraphQl_UniformResourceIdentifiable & wpGraphQl_DatabaseIdentifier & wpGraphQl_MenuItemLinkable {
  """Connection between the postFormat type and the ContentNode type"""
  contentNodes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostFormatToContentNodeConnectionWhereArgs
  ): wpGraphQl_PostFormatToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique resource identifier path"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedStylesheetConnection

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The id field matches the WP_Post-&gt;ID field."""
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the postFormat type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_PostFormatToPostConnectionWhereArgs
  ): wpGraphQl_PostFormatToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the postFormat type and the Taxonomy type"""
  taxonomy: wpGraphQl_PostFormatToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum wpGraphQl_PostFormatIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the postFormat type and the ContentNode type"""
type wpGraphQl_PostFormatToContentNodeConnection {
  """Edges for the PostFormatToContentNodeConnection connection"""
  edges: [wpGraphQl_PostFormatToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostFormatToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentNode
}

"""
Arguments for filtering the PostFormatToContentNodeConnection connection
"""
input wpGraphQl_PostFormatToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypesOfPostFormatEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the postFormat type and the post type"""
type wpGraphQl_PostFormatToPostConnection {
  """Edges for the PostFormatToPostConnection connection"""
  edges: [wpGraphQl_PostFormatToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Post]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostFormatToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Post
}

"""Arguments for filtering the PostFormatToPostConnection connection"""
input wpGraphQl_PostFormatToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the postFormat type and the Taxonomy type"""
type wpGraphQl_PostFormatToTaxonomyConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Taxonomy
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum wpGraphQl_PostIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG

  """Identify a resource by the URI."""
  URI
}

"""The format of post field data."""
enum wpGraphQl_PostObjectFieldFormatEnum {
  """
  Provide the field value directly from database. Null on unauthenticated requests.
  """
  RAW

  """Provide the field value as rendered by WordPress. Default."""
  RENDERED
}

"""The column to use when filtering by date"""
enum wpGraphQl_PostObjectsConnectionDateColumnEnum {
  """The date the comment was created in local time."""
  DATE

  """The most recent modification date of the comment."""
  MODIFIED
}

"""Field to order the connection by"""
enum wpGraphQl_PostObjectsConnectionOrderbyEnum {
  """Order by author"""
  AUTHOR

  """Order by the number of comments it has acquired"""
  COMMENT_COUNT

  """Order by publish date"""
  DATE

  """Preserve the ID order given in the IN array"""
  IN

  """Order by the menu order value"""
  MENU_ORDER

  """Order by last modified date"""
  MODIFIED

  """Preserve slug order given in the NAME_IN array"""
  NAME_IN

  """Order by parent ID"""
  PARENT

  """Order by slug"""
  SLUG

  """Order by title"""
  TITLE
}

"""Options for ordering the connection"""
input wpGraphQl_PostObjectsConnectionOrderbyInput {
  """The field to order the connection by"""
  field: wpGraphQl_PostObjectsConnectionOrderbyEnum!

  """Possible directions in which to order a list of items"""
  order: wpGraphQl_OrderEnum!
}

"""Set relationships between the post to postFormats"""
input wpGraphQl_PostPostFormatsInput {
  """
  If true, this will append the postFormat to existing related postFormats. If
  false, this will replace existing relationships. Default true.
  """
  append: Boolean

  """The input list of items to set."""
  nodes: [wpGraphQl_PostPostFormatsNodeInput]
}

"""
List of postFormats to connect the post to. If an ID is set, it will be used to
create the connection. If not, it will look for a slug. If neither are valid
existing terms, and the site is configured to allow terms to be created during
post mutations, a term will be created using the Name if it exists in the input,
then fallback to the slug if it exists.
"""
input wpGraphQl_PostPostFormatsNodeInput {
  """
  The description of the postFormat. This field is used to set a description of
  the postFormat if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the postFormat. If present, this will be used to connect to the
  post. If no existing postFormat exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the postFormat. This field is used to create a new term, if term
  creation is enabled in nested mutations, and if one does not already exist
  with the provided slug or ID or if a slug or ID is not provided. If no name is
  included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the postFormat. If no ID is present, this field will be used to
  make a connection. If no existing term exists with this slug, this field will
  be used as a fallback to the Name field when creating a new term to connect
  to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""The status of the object."""
enum wpGraphQl_PostStatusEnum {
  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the draft status"""
  DRAFT

  """Objects with the future status"""
  FUTURE

  """Objects with the inherit status"""
  INHERIT

  """Objects with the pending status"""
  PENDING

  """Objects with the private status"""
  PRIVATE

  """Objects with the publish status"""
  PUBLISH

  """Objects with the request-completed status"""
  REQUEST_COMPLETED

  """Objects with the request-confirmed status"""
  REQUEST_CONFIRMED

  """Objects with the request-failed status"""
  REQUEST_FAILED

  """Objects with the request-pending status"""
  REQUEST_PENDING

  """Objects with the trash status"""
  TRASH
}

"""Set relationships between the post to tags"""
input wpGraphQl_PostTagsInput {
  """
  If true, this will append the tag to existing related tags. If false, this
  will replace existing relationships. Default true.
  """
  append: Boolean

  """The input list of items to set."""
  nodes: [wpGraphQl_PostTagsNodeInput]
}

"""
List of tags to connect the post to. If an ID is set, it will be used to create
the connection. If not, it will look for a slug. If neither are valid existing
terms, and the site is configured to allow terms to be created during post
mutations, a term will be created using the Name if it exists in the input, then
fallback to the slug if it exists.
"""
input wpGraphQl_PostTagsNodeInput {
  """
  The description of the tag. This field is used to set a description of the tag
  if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the tag. If present, this will be used to connect to the post. If no
  existing tag exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the tag. This field is used to create a new term, if term creation
  is enabled in nested mutations, and if one does not already exist with the
  provided slug or ID or if a slug or ID is not provided. If no name is included
  and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the tag. If no ID is present, this field will be used to make a
  connection. If no existing term exists with this slug, this field will be used
  as a fallback to the Name field when creating a new term to connect to, if
  term creation is enabled as a nested mutation.
  """
  slug: String
}

"""Connection between the post type and the category type"""
type wpGraphQl_PostToCategoryConnection {
  """Edges for the PostToCategoryConnection connection"""
  edges: [wpGraphQl_PostToCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Category]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Category
}

"""Arguments for filtering the PostToCategoryConnection connection"""
input wpGraphQl_PostToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the post type and the Comment type"""
type wpGraphQl_PostToCommentConnection {
  """Edges for the PostToCommentConnection connection"""
  edges: [wpGraphQl_PostToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Comment]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Comment
}

"""Arguments for filtering the PostToCommentConnection connection"""
input wpGraphQl_PostToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [wpGraphQl_PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [wpGraphQl_ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum

  """Field to order the comments by."""
  orderby: wpGraphQl_CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the post type and the postFormat type"""
type wpGraphQl_PostToPostFormatConnection {
  """Edges for the PostToPostFormatConnection connection"""
  edges: [wpGraphQl_PostToPostFormatConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_PostFormat]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostToPostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_PostFormat
}

"""Arguments for filtering the PostToPostFormatConnection connection"""
input wpGraphQl_PostToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the post type and the post type"""
type wpGraphQl_PostToPreviewConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Post
}

"""Connection between the post type and the post type"""
type wpGraphQl_PostToRevisionConnection {
  """Edges for the postToRevisionConnection connection"""
  edges: [wpGraphQl_PostToRevisionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Post]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostToRevisionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Post
}

"""Arguments for filtering the postToRevisionConnection connection"""
input wpGraphQl_PostToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the post type and the tag type"""
type wpGraphQl_PostToTagConnection {
  """Edges for the PostToTagConnection connection"""
  edges: [wpGraphQl_PostToTagConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Tag]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostToTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Tag
}

"""Arguments for filtering the PostToTagConnection connection"""
input wpGraphQl_PostToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the post type and the TermNode type"""
type wpGraphQl_PostToTermNodeConnection {
  """Edges for the PostToTermNodeConnection connection"""
  edges: [wpGraphQl_PostToTermNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_TermNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_PostToTermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_TermNode
}

"""Arguments for filtering the PostToTermNodeConnection connection"""
input wpGraphQl_PostToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """The Taxonomy to filter terms by"""
  taxonomies: [wpGraphQl_TaxonomyEnum]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Details for labels of the PostType"""
type wpGraphQl_PostTypeLabelDetails {
  """Default is ‘Add New’ for both hierarchical and non-hierarchical types."""
  addNew: String

  """Label for adding a new singular item."""
  addNewItem: String

  """Label to signify all items in a submenu link."""
  allItems: String

  """Label for archives in nav menus"""
  archives: String

  """Label for the attributes meta box."""
  attributes: String

  """Label for editing a singular item."""
  editItem: String

  """Label for the Featured Image meta box title."""
  featuredImage: String

  """Label for the table views hidden heading."""
  filterItemsList: String

  """Label for the media frame button."""
  insertIntoItem: String

  """Label for the table hidden heading."""
  itemsList: String

  """Label for the table pagination hidden heading."""
  itemsListNavigation: String

  """Label for the menu name."""
  menuName: String

  """General name for the post type, usually plural."""
  name: String

  """Label for the new item page title."""
  newItem: String

  """Label used when no items are found."""
  notFound: String

  """Label used when no items are in the trash."""
  notFoundInTrash: String

  """Label used to prefix parents of hierarchical items."""
  parentItemColon: String

  """Label for removing the featured image."""
  removeFeaturedImage: String

  """Label for searching plural items."""
  searchItems: String

  """Label for setting the featured image."""
  setFeaturedImage: String

  """Name for one object of this post type."""
  singularName: String

  """Label for the media frame filter."""
  uploadedToThisItem: String

  """Label in the media frame for using a featured image."""
  useFeaturedImage: String

  """Label for viewing a singular item."""
  viewItem: String

  """Label for viewing post type archives."""
  viewItems: String
}

"""The reading setting type"""
type wpGraphQl_ReadingSettings {
  """Blog pages show at most."""
  postsPerPage: Int
}

"""Input for the registerUser mutation"""
input wpGraphQl_RegisterUserInput {
  """User's AOL IM account."""
  aim: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """A string that contains the user's username."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the registerUser mutation"""
type wpGraphQl_RegisterUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: wpGraphQl_User
}

"""
The logical relation between each item in the array when there are more than one.
"""
enum wpGraphQl_RelationEnum {
  """
  The logical AND condition returns true if both operands are true, otherwise, it returns false.
  """
  AND

  """
  The logical OR condition returns false if both operands are false, otherwise, it returns true.
  """
  OR
}

"""Input for the resetUserPassword mutation"""
input wpGraphQl_ResetUserPasswordInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Password reset key"""
  key: String

  """The user's login (username)."""
  login: String

  """The new password."""
  password: String
}

"""The payload for the resetUserPassword mutation"""
type wpGraphQl_ResetUserPasswordPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: wpGraphQl_User
}

"""Input for the restoreComment mutation"""
input wpGraphQl_RestoreCommentInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the comment to be restored"""
  id: ID!
}

"""The payload for the restoreComment mutation"""
type wpGraphQl_RestoreCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The restored comment object"""
  comment: wpGraphQl_Comment

  """The ID of the restored comment"""
  restoredId: ID
}

"""Connection between the RootQuery type and the category type"""
type wpGraphQl_RootQueryToCategoryConnection {
  """Edges for the RootQueryToCategoryConnection connection"""
  edges: [wpGraphQl_RootQueryToCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Category]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Category
}

"""Arguments for filtering the RootQueryToCategoryConnection connection"""
input wpGraphQl_RootQueryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Comment type"""
type wpGraphQl_RootQueryToCommentConnection {
  """Edges for the RootQueryToCommentConnection connection"""
  edges: [wpGraphQl_RootQueryToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Comment]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Comment
}

"""Arguments for filtering the RootQueryToCommentConnection connection"""
input wpGraphQl_RootQueryToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [wpGraphQl_PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [wpGraphQl_ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum

  """Field to order the comments by."""
  orderby: wpGraphQl_CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the RootQuery type and the ContentNode type"""
type wpGraphQl_RootQueryToContentNodeConnection {
  """Edges for the RootQueryToContentNodeConnection connection"""
  edges: [wpGraphQl_RootQueryToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentNode
}

"""
Arguments for filtering the RootQueryToContentNodeConnection connection
"""
input wpGraphQl_RootQueryToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""
Connection between the RootQuery type and the ContentRevisionUnion type
"""
type wpGraphQl_RootQueryToContentRevisionUnionConnection {
  """Edges for the RootQueryToContentRevisionUnionConnection connection"""
  edges: [wpGraphQl_RootQueryToContentRevisionUnionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentRevisionUnion]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToContentRevisionUnionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentRevisionUnion
}

"""
Arguments for filtering the RootQueryToContentRevisionUnionConnection connection
"""
input wpGraphQl_RootQueryToContentRevisionUnionConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the ContentType type"""
type wpGraphQl_RootQueryToContentTypeConnection {
  """Edges for the RootQueryToContentTypeConnection connection"""
  edges: [wpGraphQl_RootQueryToContentTypeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentType]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToContentTypeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentType
}

"""Connection between the RootQuery type and the EnqueuedScript type"""
type wpGraphQl_RootQueryToEnqueuedScriptConnection {
  """Edges for the RootQueryToEnqueuedScriptConnection connection"""
  edges: [wpGraphQl_RootQueryToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedScript
}

"""Connection between the RootQuery type and the EnqueuedStylesheet type"""
type wpGraphQl_RootQueryToEnqueuedStylesheetConnection {
  """Edges for the RootQueryToEnqueuedStylesheetConnection connection"""
  edges: [wpGraphQl_RootQueryToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedStylesheet
}

"""Connection between the RootQuery type and the mediaItem type"""
type wpGraphQl_RootQueryToMediaItemConnection {
  """Edges for the RootQueryToMediaItemConnection connection"""
  edges: [wpGraphQl_RootQueryToMediaItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_MediaItem]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToMediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_MediaItem
}

"""Arguments for filtering the RootQueryToMediaItemConnection connection"""
input wpGraphQl_RootQueryToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Menu type"""
type wpGraphQl_RootQueryToMenuConnection {
  """Edges for the RootQueryToMenuConnection connection"""
  edges: [wpGraphQl_RootQueryToMenuConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Menu]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToMenuConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Menu
}

"""Arguments for filtering the RootQueryToMenuConnection connection"""
input wpGraphQl_RootQueryToMenuConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: wpGraphQl_MenuLocationEnum

  """The slug of the menu to query items for"""
  slug: String
}

"""Connection between the RootQuery type and the MenuItem type"""
type wpGraphQl_RootQueryToMenuItemConnection {
  """Edges for the RootQueryToMenuItemConnection connection"""
  edges: [wpGraphQl_RootQueryToMenuItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_MenuItem]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_MenuItem
}

"""Arguments for filtering the RootQueryToMenuItemConnection connection"""
input wpGraphQl_RootQueryToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: wpGraphQl_MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""Connection between the RootQuery type and the page type"""
type wpGraphQl_RootQueryToPageConnection {
  """Edges for the RootQueryToPageConnection connection"""
  edges: [wpGraphQl_RootQueryToPageConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Page]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToPageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Page
}

"""Arguments for filtering the RootQueryToPageConnection connection"""
input wpGraphQl_RootQueryToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Plugin type"""
type wpGraphQl_RootQueryToPluginConnection {
  """Edges for the RootQueryToPluginConnection connection"""
  edges: [wpGraphQl_RootQueryToPluginConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Plugin]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToPluginConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Plugin
}

"""Arguments for filtering the RootQueryToPluginConnection connection"""
input wpGraphQl_RootQueryToPluginConnectionWhereArgs {
  """Show plugin based on a keyword search."""
  search: String

  """Retrieve plugins where plugin status is in an array."""
  stati: [wpGraphQl_PluginStatusEnum]

  """Show plugins with a specific status."""
  status: wpGraphQl_PluginStatusEnum
}

"""Connection between the RootQuery type and the post type"""
type wpGraphQl_RootQueryToPostConnection {
  """Edges for the RootQueryToPostConnection connection"""
  edges: [wpGraphQl_RootQueryToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Post]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Post
}

"""Arguments for filtering the RootQueryToPostConnection connection"""
input wpGraphQl_RootQueryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the postFormat type"""
type wpGraphQl_RootQueryToPostFormatConnection {
  """Edges for the RootQueryToPostFormatConnection connection"""
  edges: [wpGraphQl_RootQueryToPostFormatConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_PostFormat]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToPostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_PostFormat
}

"""Arguments for filtering the RootQueryToPostFormatConnection connection"""
input wpGraphQl_RootQueryToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the tag type"""
type wpGraphQl_RootQueryToTagConnection {
  """Edges for the RootQueryToTagConnection connection"""
  edges: [wpGraphQl_RootQueryToTagConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Tag]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Tag
}

"""Arguments for filtering the RootQueryToTagConnection connection"""
input wpGraphQl_RootQueryToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Taxonomy type"""
type wpGraphQl_RootQueryToTaxonomyConnection {
  """Edges for the RootQueryToTaxonomyConnection connection"""
  edges: [wpGraphQl_RootQueryToTaxonomyConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Taxonomy]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToTaxonomyConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Taxonomy
}

"""Connection between the RootQuery type and the TermNode type"""
type wpGraphQl_RootQueryToTermNodeConnection {
  """Edges for the RootQueryToTermNodeConnection connection"""
  edges: [wpGraphQl_RootQueryToTermNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_TermNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToTermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_TermNode
}

"""Arguments for filtering the RootQueryToTermNodeConnection connection"""
input wpGraphQl_RootQueryToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: wpGraphQl_OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: wpGraphQl_TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """The Taxonomy to filter terms by"""
  taxonomies: [wpGraphQl_TaxonomyEnum]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Theme type"""
type wpGraphQl_RootQueryToThemeConnection {
  """Edges for the RootQueryToThemeConnection connection"""
  edges: [wpGraphQl_RootQueryToThemeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Theme]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToThemeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Theme
}

"""Connection between the RootQuery type and the User type"""
type wpGraphQl_RootQueryToUserConnection {
  """Edges for the RootQueryToUserConnection connection"""
  edges: [wpGraphQl_RootQueryToUserConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_User]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToUserConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_User
}

"""Arguments for filtering the RootQueryToUserConnection connection"""
input wpGraphQl_RootQueryToUserConnectionWhereArgs {
  """Array of userIds to exclude."""
  exclude: [Int]

  """
  Pass an array of post types to filter results to users who have published posts in those post types.
  """
  hasPublishedPosts: [wpGraphQl_ContentTypeEnum]

  """Array of userIds to include."""
  include: [Int]

  """The user login."""
  login: String

  """
  An array of logins to include. Users matching one of these logins will be included in results.
  """
  loginIn: [String]

  """
  An array of logins to exclude. Users matching one of these logins will not be included in results.
  """
  loginNotIn: [String]

  """The user nicename."""
  nicename: String

  """
  An array of nicenames to include. Users matching one of these nicenames will be included in results.
  """
  nicenameIn: [String]

  """
  An array of nicenames to exclude. Users matching one of these nicenames will not be included in results.
  """
  nicenameNotIn: [String]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_UsersConnectionOrderbyInput]

  """
  An array of role names that users must match to be included in results. Note
  that this is an inclusive list: users must match *each* role.
  """
  role: wpGraphQl_UserRoleEnum

  """
  An array of role names. Matched users must have at least one of these roles.
  """
  roleIn: [wpGraphQl_UserRoleEnum]

  """
  An array of role names to exclude. Users matching one or more of these roles will not be included in results.
  """
  roleNotIn: [wpGraphQl_UserRoleEnum]

  """
  Search keyword. Searches for possible string matches on columns. When
  "searchColumns" is left empty, it tries to determine which column to search in
  based on search string.
  """
  search: String

  """
  Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'.
  """
  searchColumns: [wpGraphQl_UsersConnectionSearchColumnEnum]
}

"""Connection between the RootQuery type and the UserRole type"""
type wpGraphQl_RootQueryToUserRoleConnection {
  """Edges for the RootQueryToUserRoleConnection connection"""
  edges: [wpGraphQl_RootQueryToUserRoleConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_UserRole]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_RootQueryToUserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_UserRole
}

"""Input for the sendPasswordResetEmail mutation"""
input wpGraphQl_SendPasswordResetEmailInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string that contains the user's username or email address."""
  username: String!
}

"""The payload for the sendPasswordResetEmail mutation"""
type wpGraphQl_SendPasswordResetEmailPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The user that the password reset email was sent to"""
  user: wpGraphQl_User
}

"""All of the registered settings"""
type wpGraphQl_Settings {
  """Settings of the the string Settings Group"""
  discussionSettingsDefaultCommentStatus: String

  """Settings of the the string Settings Group"""
  discussionSettingsDefaultPingStatus: String

  """Settings of the the string Settings Group"""
  generalSettingsDateFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsDescription: String

  """Settings of the the string Settings Group"""
  generalSettingsEmail: String

  """Settings of the the string Settings Group"""
  generalSettingsLanguage: String

  """Settings of the the integer Settings Group"""
  generalSettingsStartOfWeek: Int

  """Settings of the the string Settings Group"""
  generalSettingsTimeFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsTimezone: String

  """Settings of the the string Settings Group"""
  generalSettingsTitle: String

  """Settings of the the string Settings Group"""
  generalSettingsUrl: String

  """Settings of the the integer Settings Group"""
  readingSettingsPostsPerPage: Int

  """Settings of the the integer Settings Group"""
  writingSettingsDefaultCategory: Int

  """Settings of the the string Settings Group"""
  writingSettingsDefaultPostFormat: String

  """Settings of the the boolean Settings Group"""
  writingSettingsUseSmilies: Boolean
}

"""The tag type"""
type wpGraphQl_Tag implements wpGraphQl_Node & wpGraphQl_TermNode & wpGraphQl_UniformResourceIdentifiable & wpGraphQl_DatabaseIdentifier & wpGraphQl_MenuItemLinkable {
  """Connection between the tag type and the ContentNode type"""
  contentNodes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_TagToContentNodeConnectionWhereArgs
  ): wpGraphQl_TagToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique resource identifier path"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedStylesheetConnection

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the tag type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_TagToPostConnectionWhereArgs
  ): wpGraphQl_TagToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The id field matches the WP_Post-&gt;ID field."""
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the tag type and the Taxonomy type"""
  taxonomy: wpGraphQl_TagToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum wpGraphQl_TagIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the tag type and the ContentNode type"""
type wpGraphQl_TagToContentNodeConnection {
  """Edges for the TagToContentNodeConnection connection"""
  edges: [wpGraphQl_TagToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentNode]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_TagToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentNode
}

"""Arguments for filtering the TagToContentNodeConnection connection"""
input wpGraphQl_TagToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypesOfTagEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the tag type and the post type"""
type wpGraphQl_TagToPostConnection {
  """Edges for the TagToPostConnection connection"""
  edges: [wpGraphQl_TagToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Post]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_TagToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Post
}

"""Arguments for filtering the TagToPostConnection connection"""
input wpGraphQl_TagToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the tag type and the Taxonomy type"""
type wpGraphQl_TagToTaxonomyConnectionEdge {
  """The node of the connection, without the edges"""
  node: wpGraphQl_Taxonomy
}

"""A taxonomy object"""
type wpGraphQl_Taxonomy implements wpGraphQl_Node {
  """List of Content Types associated with the Taxonomy"""
  connectedContentTypes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TaxonomyToContentTypeConnection

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String

  """Whether the taxonomy is hierarchical"""
  hierarchical: Boolean

  """The globally unique identifier of the taxonomy object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Name of the taxonomy shown in the menu. Usually plural."""
  label: String

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String

  """Whether the taxonomy is publicly queryable"""
  public: Boolean

  """
  Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean

  """Whether to show the taxonomy in the admin menu"""
  showInMenu: Boolean

  """Whether the taxonomy is available for selection in navigation menus."""
  showInNavMenus: Boolean

  """Whether to show the taxonomy in the quick/bulk edit panel."""
  showInQuickEdit: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
}

"""Allowed taxonomies"""
enum wpGraphQl_TaxonomyEnum {
  """Taxonomy enum category"""
  CATEGORY

  """Taxonomy enum post_format"""
  POSTFORMAT

  """Taxonomy enum post_tag"""
  TAG
}

"""
The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID".
"""
enum wpGraphQl_TaxonomyIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the taxonomy"""
  NAME
}

"""Connection between the Taxonomy type and the ContentType type"""
type wpGraphQl_TaxonomyToContentTypeConnection {
  """Edges for the TaxonomyToContentTypeConnection connection"""
  edges: [wpGraphQl_TaxonomyToContentTypeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentType]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_TaxonomyToContentTypeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentType
}

"""The template assigned to the node"""
type wpGraphQl_Template_ElementorCanvas implements wpGraphQl_ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The template assigned to the node"""
type wpGraphQl_Template_ElementorFullWidth implements wpGraphQl_ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The template assigned to the node"""
type wpGraphQl_Template_Theme implements wpGraphQl_ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""
Terms are nodes within a Taxonomy, used to group and relate other nodes.
"""
interface wpGraphQl_TermNode {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_TermNodeToEnqueuedStylesheetConnection

  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""
The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field.
"""
enum wpGraphQl_TermNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the TermNode type and the EnqueuedScript type"""
type wpGraphQl_TermNodeToEnqueuedScriptConnection {
  """Edges for the TermNodeToEnqueuedScriptConnection connection"""
  edges: [wpGraphQl_TermNodeToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_TermNodeToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedScript
}

"""Connection between the TermNode type and the EnqueuedStylesheet type"""
type wpGraphQl_TermNodeToEnqueuedStylesheetConnection {
  """Edges for the TermNodeToEnqueuedStylesheetConnection connection"""
  edges: [wpGraphQl_TermNodeToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_TermNodeToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedStylesheet
}

"""Options for ordering the connection by"""
enum wpGraphQl_TermObjectsConnectionOrderbyEnum {
  """Order the connection by item count."""
  COUNT

  """Order the connection by description."""
  DESCRIPTION

  """Order the connection by name."""
  NAME

  """Order the connection by slug."""
  SLUG

  """Order the connection by term group."""
  TERM_GROUP

  """Order the connection by term id."""
  TERM_ID

  """Order the connection by term order."""
  TERM_ORDER
}

"""A theme object"""
type wpGraphQl_Theme implements wpGraphQl_Node {
  """
  Name of the theme author(s), could also be a company name. This field is
  equivalent to WP_Theme-&gt;get( &quot;Author&quot; ).
  """
  author: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ).
  """
  authorUri: String

  """
  The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ).
  """
  description: String

  """The globally unique identifier of the theme object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ).
  """
  name: String

  """
  The URL of the screenshot for the theme. The screenshot is intended to give an
  overview of what the theme looks like. This field is equivalent to
  WP_Theme-&gt;get_screenshot().
  """
  screenshot: String

  """
  The theme slug is used to internally match themes. Theme slugs can have
  subdirectories like: my-theme/sub-theme. This field is equivalent to
  WP_Theme-&gt;get_stylesheet().
  """
  slug: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ).
  """
  tags: [String]

  """
  A URI if the theme has a website associated with it. The Theme URI is handy
  for directing users to a theme site for support etc. This field is equivalent
  to WP_Theme-&gt;get( &quot;ThemeURI&quot; ).
  """
  themeUri: String

  """
  The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ).
  """
  version: String
}

"""Any node that has a URI"""
interface wpGraphQl_UniformResourceIdentifiable {
  """The unique resource identifier path"""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The unique resource identifier path"""
  uri: String
}

"""Input for the UpdateCategory mutation"""
input wpGraphQl_UpdateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the category object"""
  description: String

  """The ID of the category object to update"""
  id: ID!

  """The name of the category object to mutate"""
  name: String

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the UpdateCategory mutation"""
type wpGraphQl_UpdateCategoryPayload {
  """The created category"""
  category: wpGraphQl_Category

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""Input for the updateComment mutation"""
input wpGraphQl_UpdateCommentInput {
  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """The url of the comment's author."""
  authorUrl: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The database ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g.
  01/31/2017 ) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17 
  """
  date: String

  """The ID of the comment being updated."""
  id: ID!

  """Parent comment ID of current comment."""
  parent: ID

  """Type of comment."""
  type: String
}

"""The payload for the updateComment mutation"""
type wpGraphQl_UpdateCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment that was created"""
  comment: wpGraphQl_Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server
  will not return the comment to a non authenticated user, but a success message
  can be returned if the create succeeded, and the client can optimistically add
  the comment to the client cache
  """
  success: Boolean
}

"""Input for the updateMediaItem mutation"""
input wpGraphQl_UpdateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: wpGraphQl_MimeTypeEnum

  """The ID of the mediaItem object"""
  id: ID!

  """The ID of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: wpGraphQl_MediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the updateMediaItem mutation"""
type wpGraphQl_UpdateMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The MediaItem object mutation type."""
  mediaItem: wpGraphQl_MediaItem
}

"""Input for the updatePage mutation"""
input wpGraphQl_UpdatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17 
  """
  date: String

  """The ID of the page object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: wpGraphQl_PostStatusEnum

  """The title of the object"""
  title: String
}

"""The payload for the updatePage mutation"""
type wpGraphQl_UpdatePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  page: wpGraphQl_Page
}

"""Input for the UpdatePostFormat mutation"""
input wpGraphQl_UpdatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_format object"""
  description: String

  """The ID of the postFormat object to update"""
  id: ID!

  """The name of the post_format object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the UpdatePostFormat mutation"""
type wpGraphQl_UpdatePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_format"""
  postFormat: wpGraphQl_PostFormat
}

"""Input for the updatePost mutation"""
input wpGraphQl_UpdatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: wpGraphQl_PostCategoriesInput

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17 
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """The ID of the post object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: wpGraphQl_PostPostFormatsInput

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: wpGraphQl_PostStatusEnum

  """Set connections between the post and tags"""
  tags: wpGraphQl_PostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the updatePost mutation"""
type wpGraphQl_UpdatePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  post: wpGraphQl_Post
}

"""Input for the updateSettings mutation"""
input wpGraphQl_UpdateSettingsInput {
  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Allow people to submit comments on new posts."""
  discussionSettingsDefaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String

  """A date format for all date strings."""
  generalSettingsDateFormat: String

  """Site tagline."""
  generalSettingsDescription: String

  """This address is used for admin purposes, like new user notification."""
  generalSettingsEmail: String

  """WordPress locale code."""
  generalSettingsLanguage: String

  """A day number of the week that the week should start on."""
  generalSettingsStartOfWeek: Int

  """A time format for all time strings."""
  generalSettingsTimeFormat: String

  """A city in the same timezone as you."""
  generalSettingsTimezone: String

  """Site title."""
  generalSettingsTitle: String

  """Site URL."""
  generalSettingsUrl: String

  """Blog pages show at most."""
  readingSettingsPostsPerPage: Int

  """Default post category."""
  writingSettingsDefaultCategory: Int

  """Default post format."""
  writingSettingsDefaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  writingSettingsUseSmilies: Boolean
}

"""The payload for the updateSettings mutation"""
type wpGraphQl_UpdateSettingsPayload {
  """Update all settings."""
  allSettings: wpGraphQl_Settings

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Update the DiscussionSettings setting."""
  discussionSettings: wpGraphQl_DiscussionSettings

  """Update the GeneralSettings setting."""
  generalSettings: wpGraphQl_GeneralSettings

  """Update the ReadingSettings setting."""
  readingSettings: wpGraphQl_ReadingSettings

  """Update the WritingSettings setting."""
  writingSettings: wpGraphQl_WritingSettings
}

"""Input for the UpdateTag mutation"""
input wpGraphQl_UpdateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_tag object"""
  description: String

  """The ID of the tag object to update"""
  id: ID!

  """The name of the post_tag object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the UpdateTag mutation"""
type wpGraphQl_UpdateTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_tag"""
  tag: wpGraphQl_Tag
}

"""Input for the updateUser mutation"""
input wpGraphQl_UpdateUserInput {
  """User's AOL IM account."""
  aim: String

  """
  This is an ID that can be passed to a mutation by the client to track the
  progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """The user's first name."""
  firstName: String

  """The ID of the user"""
  id: ID!

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the updateUser mutation"""
type wpGraphQl_UpdateUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will
  be returned as output on the mutation. This ID can be used by the client to
  track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: wpGraphQl_User
}

"""A User object"""
type wpGraphQl_User implements wpGraphQl_Node & wpGraphQl_UniformResourceIdentifiable & wpGraphQl_Commenter & wpGraphQl_DatabaseIdentifier {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    The size attribute of the avatar field can be used to fetch avatars of
    different sizes. The value corresponds to the dimension in pixels to fetch.
    The default is 96 pixels.
    """
    size: Int = 96

    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean

    """The rating level of the avatar."""
    rating: wpGraphQl_AvatarRatingEnum
  ): wpGraphQl_Avatar

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String

  """A list of capabilities (permissions) granted to the user"""
  capabilities: [String]

  """Connection between the User type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_UserToCommentConnectionWhereArgs
  ): wpGraphQl_UserToCommentConnection

  """Identifies the primary key from the database."""
  databaseId: Int!

  """Description of the user."""
  description: String

  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String

  """Connection between the User type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_UserToEnqueuedScriptConnection

  """Connection between the User type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_UserToEnqueuedStylesheetConnection

  """
  A complete list of capabilities including capabilities inherited from a role.
  This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String

  """The globally unique identifier for the user object."""
  id: ID!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String

  """Connection between the User type and the mediaItem type"""
  mediaItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_UserToMediaItemConnectionWhereArgs
  ): wpGraphQl_UserToMediaItemConnection

  """
  Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property.
  """
  name: String

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String

  """Nickname of the user."""
  nickname: String

  """Connection between the User type and the page type"""
  pages(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_UserToPageConnectionWhereArgs
  ): wpGraphQl_UserToPageConnection

  """Connection between the User type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_UserToPostConnectionWhereArgs
  ): wpGraphQl_UserToPostConnection

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String

  """Connection between the User and Revisions authored by the user"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: wpGraphQl_UserToContentRevisionUnionConnectionWhereArgs
  ): wpGraphQl_UserToContentRevisionUnionConnection

  """Connection between the User type and the UserRole type"""
  roles(
    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): wpGraphQl_UserToUserRoleConnection

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String

  """The unique resource identifier path"""
  uri: String

  """A website url that is associated with the user."""
  url: String

  """The Id of the user. Equivalent to WP_User-&gt;ID"""
  userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
}

"""
The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID".
"""
enum wpGraphQl_UserNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The Email of the User"""
  EMAIL

  """The hashed Global ID"""
  ID

  """The slug of the User"""
  SLUG

  """The URI for the node"""
  URI

  """The username the User uses to login with"""
  USERNAME
}

"""A user role object"""
type wpGraphQl_UserRole implements wpGraphQl_Node {
  """The capabilities that belong to this role"""
  capabilities: [String]

  """The display name of the role"""
  displayName: String

  """The globally unique identifier for the user role object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The registered name of the role"""
  name: String
}

"""Names of available user roles"""
enum wpGraphQl_UserRoleEnum {
  """User role with specific capabilities"""
  ADMINISTRATOR

  """User role with specific capabilities"""
  AUTHOR

  """User role with specific capabilities"""
  CONTRIBUTOR

  """User role with specific capabilities"""
  EDITOR

  """User role with specific capabilities"""
  SEO_EDITOR

  """User role with specific capabilities"""
  SEO_MANAGER

  """User role with specific capabilities"""
  SUBSCRIBER
}

"""Field to order the connection by"""
enum wpGraphQl_UsersConnectionOrderbyEnum {
  """Order by display name"""
  DISPLAY_NAME

  """Order by email address"""
  EMAIL

  """Order by login"""
  LOGIN

  """Preserve the login order given in the LOGIN_IN array"""
  LOGIN_IN

  """Order by nice name"""
  NICE_NAME

  """Preserve the nice name order given in the NICE_NAME_IN array"""
  NICE_NAME_IN

  """Order by registration date"""
  REGISTERED

  """Order by URL"""
  URL
}

"""Options for ordering the connection"""
input wpGraphQl_UsersConnectionOrderbyInput {
  """The field name used to sort the results."""
  field: wpGraphQl_UsersConnectionOrderbyEnum!

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum
}

"""Column used for searching for users."""
enum wpGraphQl_UsersConnectionSearchColumnEnum {
  """The user's email address."""
  EMAIL

  """The globally unique ID."""
  ID

  """The username the User uses to login with."""
  LOGIN

  """A URL-friendly name for the user. The default is the user's username."""
  NICENAME

  """The URL of the user\s website."""
  URL
}

"""Connection between the User type and the Comment type"""
type wpGraphQl_UserToCommentConnection {
  """Edges for the UserToCommentConnection connection"""
  edges: [wpGraphQl_UserToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Comment]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Comment
}

"""Arguments for filtering the UserToCommentConnection connection"""
input wpGraphQl_UserToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [wpGraphQl_PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [wpGraphQl_ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: wpGraphQl_OrderEnum

  """Field to order the comments by."""
  orderby: wpGraphQl_CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the User type and the ContentRevisionUnion type"""
type wpGraphQl_UserToContentRevisionUnionConnection {
  """Edges for the UserToContentRevisionUnionConnection connection"""
  edges: [wpGraphQl_UserToContentRevisionUnionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_ContentRevisionUnion]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToContentRevisionUnionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_ContentRevisionUnion
}

"""
Arguments for filtering the UserToContentRevisionUnionConnection connection
"""
input wpGraphQl_UserToContentRevisionUnionConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [wpGraphQl_ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the EnqueuedScript type"""
type wpGraphQl_UserToEnqueuedScriptConnection {
  """Edges for the UserToEnqueuedScriptConnection connection"""
  edges: [wpGraphQl_UserToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedScript
}

"""Connection between the User type and the EnqueuedStylesheet type"""
type wpGraphQl_UserToEnqueuedStylesheetConnection {
  """Edges for the UserToEnqueuedStylesheetConnection connection"""
  edges: [wpGraphQl_UserToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_EnqueuedStylesheet
}

"""Connection between the User type and the mediaItem type"""
type wpGraphQl_UserToMediaItemConnection {
  """Edges for the UserToMediaItemConnection connection"""
  edges: [wpGraphQl_UserToMediaItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_MediaItem]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToMediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_MediaItem
}

"""Arguments for filtering the UserToMediaItemConnection connection"""
input wpGraphQl_UserToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the page type"""
type wpGraphQl_UserToPageConnection {
  """Edges for the UserToPageConnection connection"""
  edges: [wpGraphQl_UserToPageConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Page]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToPageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Page
}

"""Arguments for filtering the UserToPageConnection connection"""
input wpGraphQl_UserToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the post type"""
type wpGraphQl_UserToPostConnection {
  """Edges for the UserToPostConnection connection"""
  edges: [wpGraphQl_UserToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_Post]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_Post
}

"""Arguments for filtering the UserToPostConnection connection"""
input wpGraphQl_UserToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: wpGraphQl_DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: wpGraphQl_MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [wpGraphQl_PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [wpGraphQl_PostStatusEnum]

  """Show posts with a specific status."""
  status: wpGraphQl_PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the User type and the UserRole type"""
type wpGraphQl_UserToUserRoleConnection {
  """Edges for the UserToUserRoleConnection connection"""
  edges: [wpGraphQl_UserToUserRoleConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [wpGraphQl_UserRole]

  """Information about pagination in a connection."""
  pageInfo: wpGraphQl_WPPageInfo
}

"""An edge in a connection"""
type wpGraphQl_UserToUserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: wpGraphQl_UserRole
}

"""Information about pagination in a connection."""
type wpGraphQl_WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The writing setting type"""
type wpGraphQl_WritingSettings {
  """Default post category."""
  defaultCategory: Int

  """Default post format."""
  defaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  useSmilies: Boolean
}

